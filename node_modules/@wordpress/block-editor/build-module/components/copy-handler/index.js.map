{"version":3,"names":["useCallback","serialize","pasteHandler","store","blocksStore","createBlock","findTransform","getBlockTransforms","documentHasSelection","documentHasUncollapsedSelection","__unstableStripHTML","stripHTML","useDispatch","useSelect","__","_n","sprintf","noticesStore","useRefEffect","getPasteEventData","blockEditorStore","useNotifyCopy","getBlockName","getBlockType","createSuccessNotice","eventType","selectedBlockClientIds","notice","length","clientId","title","type","useClipboardHandler","getBlocksByClientId","getSelectedBlockClientIds","hasMultiSelection","getSettings","__unstableIsFullySelected","__unstableIsSelectionCollapsed","__unstableIsSelectionMergeable","__unstableGetSelectedBlocksWithPartialSelection","canInsertBlockType","flashBlock","removeBlocks","replaceBlocks","__unstableDeleteSelection","__unstableExpandSelection","insertBlocks","notifyCopy","node","handler","event","defaultPrevented","target","ownerDocument","hasSelection","contains","activeElement","preventDefault","isSelectionMergeable","shouldHandleWholeBlocks","expandSelectionIsNeeded","blocks","head","tail","inBetweenBlocks","slice","wrapperBlockName","clipboardData","getData","JSON","parse","serialized","setData","toPlainText","contentEditable","__experimentalCanUserUseUnfilteredHTML","canUserUseUnfilteredHTML","plainText","html","files","fromTransforms","reduce","accumulator","file","transformation","transform","isMatch","push","flat","HTML","mode","selectedBlockClientId","every","block","name","undefined","addEventListener","removeEventListener","CopyHandler","children","createElement","ref","replace","trim"],"sources":["@wordpress/block-editor/src/components/copy-handler/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport {\n\tserialize,\n\tpasteHandler,\n\tstore as blocksStore,\n\tcreateBlock,\n\tfindTransform,\n\tgetBlockTransforms,\n} from '@wordpress/blocks';\nimport {\n\tdocumentHasSelection,\n\tdocumentHasUncollapsedSelection,\n\t__unstableStripHTML as stripHTML,\n} from '@wordpress/dom';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getPasteEventData } from '../../utils/pasting';\nimport { store as blockEditorStore } from '../../store';\n\nexport function useNotifyCopy() {\n\tconst { getBlockName } = useSelect( blockEditorStore );\n\tconst { getBlockType } = useSelect( blocksStore );\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\n\treturn useCallback( ( eventType, selectedBlockClientIds ) => {\n\t\tlet notice = '';\n\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\tconst clientId = selectedBlockClientIds[ 0 ];\n\t\t\tconst title = getBlockType( getBlockName( clientId ) )?.title;\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being copied, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Copied \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being cut, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Moved \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  );\n\t\t} else {\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being copied.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Copied %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Copied %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being cut.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Moved %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Moved %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  );\n\t\t}\n\t\tcreateSuccessNotice( notice, {\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t}, [] );\n}\n\nexport function useClipboardHandler() {\n\tconst {\n\t\tgetBlocksByClientId,\n\t\tgetSelectedBlockClientIds,\n\t\thasMultiSelection,\n\t\tgetSettings,\n\t\t__unstableIsFullySelected,\n\t\t__unstableIsSelectionCollapsed,\n\t\t__unstableIsSelectionMergeable,\n\t\t__unstableGetSelectedBlocksWithPartialSelection,\n\t\tcanInsertBlockType,\n\t} = useSelect( blockEditorStore );\n\tconst {\n\t\tflashBlock,\n\t\tremoveBlocks,\n\t\treplaceBlocks,\n\t\t__unstableDeleteSelection,\n\t\t__unstableExpandSelection,\n\t\tinsertBlocks,\n\t} = useDispatch( blockEditorStore );\n\tconst notifyCopy = useNotifyCopy();\n\n\treturn useRefEffect( ( node ) => {\n\t\tfunction handler( event ) {\n\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\t// This was likely already handled in rich-text/use-paste-handler.js.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\n\n\t\t\tif ( selectedBlockClientIds.length === 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Always handle multiple selected blocks.\n\t\t\tif ( ! hasMultiSelection() ) {\n\t\t\t\tconst { target } = event;\n\t\t\t\tconst { ownerDocument } = target;\n\t\t\t\t// If copying, only consider actual text selection as selection.\n\t\t\t\t// Otherwise, any focus on an input field is considered.\n\t\t\t\tconst hasSelection =\n\t\t\t\t\tevent.type === 'copy' || event.type === 'cut'\n\t\t\t\t\t\t? documentHasUncollapsedSelection( ownerDocument )\n\t\t\t\t\t\t: documentHasSelection( ownerDocument );\n\n\t\t\t\t// Let native copy behaviour take over in input fields.\n\t\t\t\tif ( hasSelection ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! node.contains( event.target.ownerDocument.activeElement ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconst isSelectionMergeable = __unstableIsSelectionMergeable();\n\t\t\tconst shouldHandleWholeBlocks =\n\t\t\t\t__unstableIsSelectionCollapsed() || __unstableIsFullySelected();\n\t\t\tconst expandSelectionIsNeeded =\n\t\t\t\t! shouldHandleWholeBlocks && ! isSelectionMergeable;\n\t\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\t\tflashBlock( selectedBlockClientIds[ 0 ] );\n\t\t\t\t}\n\t\t\t\t// If we have a partial selection that is not mergeable, just\n\t\t\t\t// expand the selection to the whole blocks.\n\t\t\t\tif ( expandSelectionIsNeeded ) {\n\t\t\t\t\t__unstableExpandSelection();\n\t\t\t\t} else {\n\t\t\t\t\tnotifyCopy( event.type, selectedBlockClientIds );\n\t\t\t\t\tlet blocks;\n\t\t\t\t\t// Check if we have partial selection.\n\t\t\t\t\tif ( shouldHandleWholeBlocks ) {\n\t\t\t\t\t\tblocks = getBlocksByClientId( selectedBlockClientIds );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst [ head, tail ] =\n\t\t\t\t\t\t\t__unstableGetSelectedBlocksWithPartialSelection();\n\t\t\t\t\t\tconst inBetweenBlocks = getBlocksByClientId(\n\t\t\t\t\t\t\tselectedBlockClientIds.slice(\n\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length - 1\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tblocks = [ head, ...inBetweenBlocks, tail ];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wrapperBlockName = event.clipboardData.getData(\n\t\t\t\t\t\t'__unstableWrapperBlockName'\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( wrapperBlockName ) {\n\t\t\t\t\t\tblocks = createBlock(\n\t\t\t\t\t\t\twrapperBlockName,\n\t\t\t\t\t\t\tJSON.parse(\n\t\t\t\t\t\t\t\tevent.clipboardData.getData(\n\t\t\t\t\t\t\t\t\t'__unstableWrapperBlockAttributes'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tblocks\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst serialized = serialize( blocks );\n\n\t\t\t\t\tevent.clipboardData.setData(\n\t\t\t\t\t\t'text/plain',\n\t\t\t\t\t\ttoPlainText( serialized )\n\t\t\t\t\t);\n\t\t\t\t\tevent.clipboardData.setData( 'text/html', serialized );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( event.type === 'cut' ) {\n\t\t\t\t// We need to also check if at the start we needed to\n\t\t\t\t// expand the selection, as in this point we might have\n\t\t\t\t// programmatically fully selected the blocks above.\n\t\t\t\tif ( shouldHandleWholeBlocks && ! expandSelectionIsNeeded ) {\n\t\t\t\t\tremoveBlocks( selectedBlockClientIds );\n\t\t\t\t} else {\n\t\t\t\t\tevent.target.ownerDocument.activeElement.contentEditable = false;\n\t\t\t\t\t__unstableDeleteSelection();\n\t\t\t\t}\n\t\t\t} else if ( event.type === 'paste' ) {\n\t\t\t\tconst {\n\t\t\t\t\t__experimentalCanUserUseUnfilteredHTML:\n\t\t\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t\t} = getSettings();\n\t\t\t\tconst { plainText, html, files } = getPasteEventData( event );\n\t\t\t\tlet blocks = [];\n\n\t\t\t\tif ( files.length ) {\n\t\t\t\t\tconst fromTransforms = getBlockTransforms( 'from' );\n\t\t\t\t\tblocks = files\n\t\t\t\t\t\t.reduce( ( accumulator, file ) => {\n\t\t\t\t\t\t\tconst transformation = findTransform(\n\t\t\t\t\t\t\t\tfromTransforms,\n\t\t\t\t\t\t\t\t( transform ) =>\n\t\t\t\t\t\t\t\t\ttransform.type === 'files' &&\n\t\t\t\t\t\t\t\t\ttransform.isMatch( [ file ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( transformation ) {\n\t\t\t\t\t\t\t\taccumulator.push(\n\t\t\t\t\t\t\t\t\ttransformation.transform( [ file ] )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t\t}, [] )\n\t\t\t\t\t\t.flat();\n\t\t\t\t} else {\n\t\t\t\t\tblocks = pasteHandler( {\n\t\t\t\t\t\tHTML: html,\n\t\t\t\t\t\tplainText,\n\t\t\t\t\t\tmode: 'BLOCKS',\n\t\t\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\t\tconst [ selectedBlockClientId ] = selectedBlockClientIds;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tblocks.every( ( block ) =>\n\t\t\t\t\t\t\tcanInsertBlockType(\n\t\t\t\t\t\t\t\tblock.name,\n\t\t\t\t\t\t\t\tselectedBlockClientId\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tinsertBlocks(\n\t\t\t\t\t\t\tblocks,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tselectedBlockClientId\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treplaceBlocks(\n\t\t\t\t\tselectedBlockClientIds,\n\t\t\t\t\tblocks,\n\t\t\t\t\tblocks.length - 1,\n\t\t\t\t\t-1\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tnode.ownerDocument.addEventListener( 'copy', handler );\n\t\tnode.ownerDocument.addEventListener( 'cut', handler );\n\t\tnode.ownerDocument.addEventListener( 'paste', handler );\n\n\t\treturn () => {\n\t\t\tnode.ownerDocument.removeEventListener( 'copy', handler );\n\t\t\tnode.ownerDocument.removeEventListener( 'cut', handler );\n\t\t\tnode.ownerDocument.removeEventListener( 'paste', handler );\n\t\t};\n\t}, [] );\n}\n\nfunction CopyHandler( { children } ) {\n\treturn <div ref={ useClipboardHandler() }>{ children }</div>;\n}\n\n/**\n * Given a string of HTML representing serialized blocks, returns the plain\n * text extracted after stripping the HTML of any tags and fixing line breaks.\n *\n * @param {string} html Serialized blocks.\n * @return {string} The plain-text content with any html removed.\n */\nfunction toPlainText( html ) {\n\t// Manually handle BR tags as line breaks prior to `stripHTML` call\n\thtml = html.replace( /<br>/g, '\\n' );\n\n\tconst plainText = stripHTML( html ).trim();\n\n\t// Merge any consecutive line breaks\n\treturn plainText.replace( /\\n\\n+/g, '\\n\\n' );\n}\n\n/**\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/copy-handler/README.md\n */\nexport default CopyHandler;\n"],"mappings":"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"}