{"version":3,"names":["Platform","castArray","maybeArray","Array","isArray","privateSettings","__experimentalUpdateSettings","settings","stripExperimentalSettings","reset","cleanSettings","OS","key","includes","type","hideBlockInterface","showBlockInterface","privateRemoveBlocks","clientIds","selectPrevious","forceRemove","select","dispatch","registry","length","rootClientId","getBlockRootClientId","canRemoveBlocks","rules","getBlockRemovalRules","blockNamesForPrompt","Set","queue","clientId","shift","blockName","getBlockName","add","innerBlocks","getBlockOrder","push","size","displayBlockRemovalPrompt","from","selectPreviousBlock","batch","ensureDefaultBlock","count","getBlockCount","__unstableHasCustomAppender","getSettings","insertDefaultBlock","clearBlockRemovalPrompt","setBlockRemovalRules","setOpenedBlockSettingsMenu","setStyleOverride","id","style","deleteStyleOverride"],"sources":["@wordpress/block-editor/src/store/private-actions.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Platform } from '@wordpress/element';\n\nconst castArray = ( maybeArray ) =>\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\n\n/**\n * A list of private/experimental block editor settings that\n * should not become a part of the WordPress public API.\n * BlockEditorProvider will remove these settings from the\n * settings object it receives.\n *\n * @see https://github.com/WordPress/gutenberg/pull/46131\n */\nconst privateSettings = [\n\t'inserterMediaCategories',\n\t'blockInspectorAnimation',\n];\n\n/**\n * Action that updates the block editor settings and\n * conditionally preserves the experimental ones.\n *\n * @param {Object}  settings                          Updated settings\n * @param {Object}  options                           Options object.\n * @param {boolean} options.stripExperimentalSettings Whether to strip experimental settings.\n * @param {boolean} options.reset                     Whether to reset the settings.\n * @return {Object} Action object\n */\nexport function __experimentalUpdateSettings(\n\tsettings,\n\t{ stripExperimentalSettings = false, reset = false } = {}\n) {\n\tlet cleanSettings = settings;\n\t// There are no plugins in the mobile apps, so there is no\n\t// need to strip the experimental settings:\n\tif ( stripExperimentalSettings && Platform.OS === 'web' ) {\n\t\tcleanSettings = {};\n\t\tfor ( const key in settings ) {\n\t\t\tif ( ! privateSettings.includes( key ) ) {\n\t\t\t\tcleanSettings[ key ] = settings[ key ];\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings: cleanSettings,\n\t\treset,\n\t};\n}\n\n/**\n * Hides the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function hideBlockInterface() {\n\treturn {\n\t\ttype: 'HIDE_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * Shows the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function showBlockInterface() {\n\treturn {\n\t\ttype: 'SHOW_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * Compared to `removeBlocks`, this private interface exposes an additional\n * parameter; see `forceRemove`.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block\n *                                         or the immediate parent\n *                                         (if no previous block exists)\n *                                         should be selected\n *                                         when a block is removed.\n * @param {boolean}         forceRemove    Whether to force the operation,\n *                                         bypassing any checks for certain\n *                                         block types.\n */\nexport const privateRemoveBlocks =\n\t( clientIds, selectPrevious = true, forceRemove = false ) =>\n\t( { select, dispatch, registry } ) => {\n\t\tif ( ! clientIds || ! clientIds.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tclientIds = castArray( clientIds );\n\t\tconst rootClientId = select.getBlockRootClientId( clientIds[ 0 ] );\n\t\tconst canRemoveBlocks = select.canRemoveBlocks(\n\t\t\tclientIds,\n\t\t\trootClientId\n\t\t);\n\n\t\tif ( ! canRemoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In certain editing contexts, we'd like to prevent accidental removal\n\t\t// of important blocks. For example, in the site editor, the Query Loop\n\t\t// block is deemed important. In such cases, we'll ask the user for\n\t\t// confirmation that they intended to remove such block(s). However,\n\t\t// the editor instance is responsible for presenting those confirmation\n\t\t// prompts to the user. Any instance opting into removal prompts must\n\t\t// register using `setBlockRemovalRules()`.\n\t\t//\n\t\t// @see https://github.com/WordPress/gutenberg/pull/51145\n\t\tconst rules = ! forceRemove && select.getBlockRemovalRules();\n\t\tif ( rules ) {\n\t\t\tconst blockNamesForPrompt = new Set();\n\n\t\t\t// Given a list of client IDs of blocks that the user intended to\n\t\t\t// remove, perform a tree search (BFS) to find all block names\n\t\t\t// corresponding to \"important\" blocks, i.e. blocks that require a\n\t\t\t// removal prompt.\n\t\t\tconst queue = [ ...clientIds ];\n\t\t\twhile ( queue.length ) {\n\t\t\t\tconst clientId = queue.shift();\n\t\t\t\tconst blockName = select.getBlockName( clientId );\n\t\t\t\tif ( rules[ blockName ] ) {\n\t\t\t\t\tblockNamesForPrompt.add( blockName );\n\t\t\t\t}\n\t\t\t\tconst innerBlocks = select.getBlockOrder( clientId );\n\t\t\t\tqueue.push( ...innerBlocks );\n\t\t\t}\n\n\t\t\t// If any such blocks were found, trigger the removal prompt and\n\t\t\t// skip any other steps (thus postponing actual removal).\n\t\t\tif ( blockNamesForPrompt.size ) {\n\t\t\t\tdispatch(\n\t\t\t\t\tdisplayBlockRemovalPrompt(\n\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\tselectPrevious,\n\t\t\t\t\t\tArray.from( blockNamesForPrompt )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( selectPrevious ) {\n\t\t\tdispatch.selectPreviousBlock( clientIds[ 0 ], selectPrevious );\n\t\t}\n\n\t\t// We're batching these two actions because an extra `undo/redo` step can\n\t\t// be created, based on whether we insert a default block or not.\n\t\tregistry.batch( () => {\n\t\t\tdispatch( { type: 'REMOVE_BLOCKS', clientIds } );\n\t\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t\t// always a default block if the last of the blocks have been removed.\n\t\t\tdispatch( ensureDefaultBlock() );\n\t\t} );\n\t};\n\n/**\n * Action which will insert a default block insert action if there\n * are no other blocks at the root of the editor. This action should be used\n * in actions which may result in no blocks remaining in the editor (removal,\n * replacement, etc).\n */\nexport const ensureDefaultBlock =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t// always a default block if the last of the blocks have been removed.\n\t\tconst count = select.getBlockCount();\n\t\tif ( count > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there's an custom appender, don't insert default block.\n\t\t// We have to remember to manually move the focus elsewhere to\n\t\t// prevent it from being lost though.\n\t\tconst { __unstableHasCustomAppender } = select.getSettings();\n\t\tif ( __unstableHasCustomAppender ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch.insertDefaultBlock();\n\t};\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be displayed.\n *\n * Contrast with `setBlockRemovalRules`.\n *\n * @param {string|string[]} clientIds           Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious      True if the previous block\n *                                              or the immediate parent\n *                                              (if no previous block exists)\n *                                              should be selected\n *                                              when a block is removed.\n * @param {string[]}        blockNamesForPrompt Names of the blocks that\n *                                              triggered the need for\n *                                              confirmation before removal.\n *\n * @return {Object} Action object.\n */\nfunction displayBlockRemovalPrompt(\n\tclientIds,\n\tselectPrevious,\n\tblockNamesForPrompt\n) {\n\treturn {\n\t\ttype: 'DISPLAY_BLOCK_REMOVAL_PROMPT',\n\t\tclientIds,\n\t\tselectPrevious,\n\t\tblockNamesForPrompt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be cleared, either be cause the user has confirmed or canceled the request\n * for removal.\n *\n * @return {Object} Action object.\n */\nexport function clearBlockRemovalPrompt() {\n\treturn {\n\t\ttype: 'CLEAR_BLOCK_REMOVAL_PROMPT',\n\t};\n}\n\n/**\n * Returns an action object used to set up any rules that a block editor may\n * provide in order to prevent a user from accidentally removing certain\n * blocks. These rules are then used to display a confirmation prompt to the\n * user. For instance, in the Site Editor, the Query Loop block is important\n * enough to warrant such confirmation.\n *\n * IMPORTANT: Registering rules implicitly signals to the `privateRemoveBlocks`\n * action that the editor will be responsible for displaying block removal\n * prompts and confirming deletions. This action is meant to be used by\n * component `BlockRemovalWarningModal` only.\n *\n * The data is a record whose keys are block types (e.g. 'core/query') and\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\n * displays a list of posts or pages.').\n *\n * Contrast with `displayBlockRemovalPrompt`.\n *\n * @param {Record<string,string>|false} rules Block removal rules.\n * @return {Object} Action object.\n */\nexport function setBlockRemovalRules( rules = false ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_REMOVAL_RULES',\n\t\trules,\n\t};\n}\n\n/**\n * Sets the client ID of the block settings menu that is currently open.\n *\n * @param {?string} clientId The block client ID.\n * @return {Object} Action object.\n */\nexport function setOpenedBlockSettingsMenu( clientId ) {\n\treturn {\n\t\ttype: 'SET_OPENED_BLOCK_SETTINGS_MENU',\n\t\tclientId,\n\t};\n}\n\nexport function setStyleOverride( id, style ) {\n\treturn {\n\t\ttype: 'SET_STYLE_OVERRIDE',\n\t\tid,\n\t\tstyle,\n\t};\n}\n\nexport function deleteStyleOverride( id ) {\n\treturn {\n\t\ttype: 'DELETE_STYLE_OVERRIDE',\n\t\tid,\n\t};\n}\n"],"mappings":"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"}