{"version":3,"names":["createSelector","getBlockType","getBlockTypes","getBlockVariations","hasBlockSupport","getPossibleBlockTransformations","parse","switchToBlockType","store","blocksStore","Platform","applyFilters","symbol","create","remove","toHTMLString","deprecated","createRegistrySelector","mapRichTextSettings","orderBy","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","clientIds","givenIds","Array","isArray","collectedIds","givenId","descendantId","push","getClientIdsWithDescendants","topLevelId","getGlobalBlockCount","blockName","length","reduce","accumulator","__experimentalGetGlobalBlocksByName","blockNames","foundBlocks","filter","includes","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","id","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockAType","blockB","blockBType","htmlA","htmlB","attributeDefinitionA","attributeDefinitionB","valueA","html","valueB","text","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","hasDraggedInnerBlock","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","_getBlockListSettings","_state$settings$templ","templateLock","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","getBlockEditingMode","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","bind","canInsertBlockType","blockListSettings","blockEditingModes","canInsertBlocks","every","canRemoveBlock","lock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","canLockBlocks","getInsertUsage","_state$preferences$in","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","utility","getInserterItems","buildReusableBlockInserterItem","reusableBlock","wp_pattern_sync_status","src","foreground","ref","raw","content","syncStatus","syncedPatternInserterItems","getReusableBlocks","buildBlockTypeInserterItem","blockTypeInserterItems","items","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","alternative","getDirectInsertBlock","defaultBlock","directInsert","__experimentalGetDirectInsertBlock","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","getUserPatterns","_state$settings$__exp","_state$settings$__exp2","userPatterns","__experimentalReusableBlocks","userPatternCategories","__experimentalUserPatternCategories","categories","Map","userCategory","set","userPattern","wp_pattern_category","catId","slug","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","find","__unstableSkipMigrationLogs","getAllAllowedPatterns","parsedPatterns","inserter","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","_state$settings$__exp3","isNavigationMode","editorMode","__unstableGetEditorMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","_state$blockVisibilit","blockVisibility","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableGetContentLockingParent","result","__unstableGetTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","__unstableHasActiveBlockOverlayActive","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay","select","isContent","__experimentalHasContentRoleAttribute","parentMode","isUngroupable","_clientId","getGroupingBlockName","groupingBlockName","_isUngroupable","transforms","ungroup","isGroupable","_clientIds","groupingBlockAvailable","_isGroupable"],"sources":["@wordpress/block-editor/src/store/selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n\tswitchToBlockType,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { mapRichTextSettings } from './utils';\nimport { orderBy } from '../utils/sorting';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shared reference to an empty Set for cases where it is important to avoid\n * returning a new Set reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Set}\n */\nconst EMPTY_SET = new Set();\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes.get( clientId );\n\t\tconst { service } = attributes ?? {};\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes.get( clientId );\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree.get( clientId );\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...state.blocks.byClientId.get( clientId ),\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId.get( clientId ),\n\t\tstate.blocks.attributes.get( clientId ),\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\tclientId,\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object}          state     Global application state.\n * @param {string|string[]} clientIds Client ID(s) for which descendant blocks are to be returned.\n *\n * @return {Array} Client IDs of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, clientIds ) => {\n\t\tconst givenIds = Array.isArray( clientIds ) ? clientIds : [ clientIds ];\n\t\tconst collectedIds = [];\n\t\tfor ( const givenId of givenIds ) {\n\t\t\tfor ( const descendantId of getBlockOrder( state, givenId ) ) {\n\t\t\t\tcollectedIds.push(\n\t\t\t\t\tdescendantId,\n\t\t\t\t\t...getClientIdsOfDescendants( state, descendantId )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const topLevelId of getBlockOrder( state ) ) {\n\t\t\tcollectedIds.push(\n\t\t\t\ttopLevelId,\n\t\t\t\t...getClientIdsOfDescendants( state, topLevelId )\n\t\t\t);\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn clientIds.reduce( ( accumulator, clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t}, 0 );\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const __experimentalGetGlobalBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst blockNames = Array.isArray( blockName )\n\t\t\t? blockName\n\t\t\t: [ blockName ];\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn blockNames.includes( block.name );\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\n\t\t)\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * names.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\n *\n * @return {string[]} Block names.\n */\nexport const getBlockNamesByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tgetBlocksByClientId( state, clientIds )\n\t\t\t.filter( Boolean )\n\t\t\t.map( ( block ) => block.name ),\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount =\n\t\tgetMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents.has( clientId )\n\t\t? state.blocks.parents.get( clientId )\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents.get( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tparents.push( current );\n\t\t}\n\n\t\tif ( ! parents.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\tconst hasName = Array.isArray( blockName )\n\t\t\t? ( name ) => blockName.includes( name )\n\t\t\t: ( name ) => blockName === name;\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents.get( current );\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order.get( rootClientId );\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\n\t\tconst blockName = getBlockName( state, clientId );\n\t\tconst blockType = getBlockType( blockName );\n\t\treturn ! blockType.merge;\n\t} );\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) return false;\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t)\n\t\treturn false;\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlockName );\n\n\tif ( ! targetBlockType.merge ) return false;\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlockName ) return true;\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockAType = getBlockType( blockA.name );\n\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\tconst blockBType = getBlockType( blockB.name );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tconst attributeDefinitionA =\n\t\tblockAType.attributes[ selectionStart.attributeKey ];\n\tconst attributeDefinitionB =\n\t\tblockBType.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( {\n\t\thtml: htmlA,\n\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t} );\n\tlet valueB = create( {\n\t\thtml: htmlB,\n\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t} );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if one of the block's inner blocks is dragged.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block dragged\n */\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn parents.some( ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport const getBlockInsertionPoint = createSelector(\n\t( state ) => {\n\t\tlet rootClientId, index;\n\n\t\tconst {\n\t\t\tinsertionPoint,\n\t\t\tselection: { selectionEnd },\n\t\t} = state;\n\t\tif ( insertionPoint !== null ) {\n\t\t\treturn insertionPoint;\n\t\t}\n\n\t\tconst { clientId } = selectionEnd;\n\n\t\tif ( clientId ) {\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\n\t\t} else {\n\t\t\tindex = getBlockOrder( state ).length;\n\t\t}\n\n\t\treturn { rootClientId, index };\n\t},\n\t( state ) => [\n\t\tstate.insertionPoint,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tstate.blocks.parents,\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {string|false} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock ?? false;\n\t}\n\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( typeof list === 'boolean' ) {\n\t\treturn list;\n\t}\n\tif ( Array.isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockEditingModes,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.remove !== undefined ) {\n\t\treturn ! attributes.lock.remove;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean | undefined} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.move !== undefined ) {\n\t\treturn ! attributes.lock.move;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem =\n\t( state, { buildScope = 'inserter' } ) =>\n\t( blockType ) => {\n\t\tconst id = blockType.name;\n\n\t\tlet isDisabled = false;\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\tisDisabled = getBlocksByClientId(\n\t\t\t\tstate,\n\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t).some( ( { name } ) => name === blockType.name );\n\t\t}\n\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\tconst blockItemBase = {\n\t\t\tid,\n\t\t\tname: blockType.name,\n\t\t\ttitle: blockType.title,\n\t\t\ticon: blockType.icon,\n\t\t\tisDisabled,\n\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t};\n\t\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\t\tconst inserterVariations = getBlockVariations(\n\t\t\tblockType.name,\n\t\t\t'inserter'\n\t\t);\n\t\treturn {\n\t\t\t...blockItemBase,\n\t\t\tinitialAttributes: {},\n\t\t\tdescription: blockType.description,\n\t\t\tcategory: blockType.category,\n\t\t\tkeywords: blockType.keywords,\n\t\t\tvariations: inserterVariations,\n\t\t\texample: blockType.example,\n\t\t\tutility: 1, // Deprecated.\n\t\t};\n\t};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst icon = ! reusableBlock.wp_pattern_sync_status\n\t\t\t\t? {\n\t\t\t\t\t\tsrc: symbol,\n\t\t\t\t\t\tforeground: 'var(--wp-block-synced-color)',\n\t\t\t\t  }\n\t\t\t\t: symbol;\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title?.raw,\n\t\t\t\ticon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [ 'reusable' ],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\tfrecency,\n\t\t\t\tcontent: reusableBlock.content.raw,\n\t\t\t\tsyncStatus: reusableBlock.wp_pattern_sync_status,\n\t\t\t};\n\t\t};\n\n\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst items = blockTypeInserterItems.reduce( ( accumulator, item ) => {\n\t\t\tconst { variations = [] } = item;\n\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\taccumulator.push( item );\n\t\t\t}\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\taccumulator.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\n\t\t\tgroupByType,\n\t\t\t{ core: [], noncore: [] }\n\t\t);\n\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst normalizedBlocks = Array.isArray( blocks ) ? blocks : [ blocks ];\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = Object.fromEntries(\n\t\t\tObject.entries( blockTypeTransformItems ).map( ( [ , value ] ) => [\n\t\t\t\tvalue.name,\n\t\t\t\tvalue,\n\t\t\t] )\n\t\t);\n\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tnormalizedBlocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\treturn orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const getAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn [\n\t\t\t...blockTypes,\n\t\t\t...( hasReusableBlock ? [ 'core/block' ] : [] ),\n\t\t];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getAllowedBlocks( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\t...getAllowedBlocks.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {?WPDirectInsertBlock}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\n */\nexport const getDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.defaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.directInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getDirectInsertBlock( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( typeof allowedBlockTypes === 'boolean' ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nfunction getUserPatterns( state ) {\n\tconst userPatterns =\n\t\tstate?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n\tconst userPatternCategories =\n\t\tstate?.settings?.__experimentalUserPatternCategories ?? [];\n\tconst categories = new Map();\n\tuserPatternCategories.forEach( ( userCategory ) =>\n\t\tcategories.set( userCategory.id, userCategory )\n\t);\n\treturn userPatterns.map( ( userPattern ) => {\n\t\treturn {\n\t\t\tname: `core/block/${ userPattern.id }`,\n\t\t\tid: userPattern.id,\n\t\t\ttype: 'user',\n\t\t\ttitle: userPattern.title.raw,\n\t\t\tcategories: userPattern.wp_pattern_category.map( ( catId ) =>\n\t\t\t\tcategories && categories.get( catId )\n\t\t\t\t\t? categories.get( catId ).slug\n\t\t\t\t\t: catId\n\t\t\t),\n\t\t\tcontent: userPattern.content.raw,\n\t\t\tsyncStatus: userPattern.wp_pattern_sync_status,\n\t\t};\n\t} );\n}\n\nexport const __experimentalUserPatternCategories = createSelector(\n\t( state ) => {\n\t\treturn state?.settings?.__experimentalUserPatternCategories;\n\t},\n\t( state ) => [ state.settings.__experimentalUserPatternCategories ]\n);\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst userPatterns = getUserPatterns( state );\n\n\t\tconst pattern = [ ...patterns, ...userPatterns ].find(\n\t\t\t( { name } ) => name === patternName\n\t\t);\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content, {\n\t\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t} ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate?.settings?.__experimentalUserPatternCategories,\n\t]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst userPatterns = getUserPatterns( state );\n\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\n\t\tconst parsedPatterns = [ ...userPatterns, ...patterns ]\n\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t.map( ( { name } ) =>\n\t\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate?.settings?.__experimentalUserPatternCategories,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = availableParsedPatterns.filter(\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const getPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t\tif ( filteredPatterns.length === 0 ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\treturn filteredPatterns;\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getPatternsByBlockTypes( state, blockNames, rootClientId );\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn getPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\t...getPatternsByBlockTypes.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = getReusableBlocks( state ).find(\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.editorMode === 'navigation';\n}\n\n/**\n * Returns the current editor mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} the editor mode.\n */\nexport function __unstableGetEditorMode( state ) {\n\treturn state.editorMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blockVisibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\tconst visibleBlocks = new Set(\n\t\t\tObject.keys( state.blockVisibility ).filter(\n\t\t\t\t( key ) => state.blockVisibility[ key ]\n\t\t\t)\n\t\t);\n\t\tif ( visibleBlocks.size === 0 ) {\n\t\t\treturn EMPTY_SET;\n\t\t}\n\t\treturn visibleBlocks;\n\t},\n\t( state ) => [ state.blockVisibility ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __unstableGetContentLockingParent = createSelector(\n\t( state, clientId ) => {\n\t\tlet current = clientId;\n\t\tlet result;\n\t\twhile ( state.blocks.parents.has( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tif (\n\t\t\t\tcurrent &&\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\n\t\t\t) {\n\t\t\t\tresult = current;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\n\t// Prevent overlay on blocks with a non-default editing mode. If the mdoe is\n\t// 'disabled' then the overlay is redundant since the block can't be\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\n\t// since there will be no controls to interact with once selected.\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\n\t\treturn false;\n\t}\n\n\t// If the block editing is locked, the block overlay is always active.\n\tif ( ! canEditBlock( state, clientId ) ) {\n\t\treturn true;\n\t}\n\n\tconst editorMode = __unstableGetEditorMode( state );\n\n\t// In zoom-out mode, the block overlay is always active for top level blocks.\n\tif (\n\t\teditorMode === 'zoom-out' &&\n\t\tclientId &&\n\t\t! getBlockRootClientId( state, clientId )\n\t) {\n\t\treturn true;\n\t}\n\n\t// In navigation mode, the block overlay is active when the block is not\n\t// selected (and doesn't contain a selected child). The same behavior is\n\t// also enabled in all modes for blocks that have controlled children\n\t// (reusable block, template part, navigation), unless explicitly disabled\n\t// with `supports.__experimentalDisableBlockOverlay`.\n\tconst blockSupportDisable = hasBlockSupport(\n\t\tgetBlockName( state, clientId ),\n\t\t'__experimentalDisableBlockOverlay',\n\t\tfalse\n\t);\n\tconst shouldEnableIfUnselected =\n\t\teditorMode === 'navigation' ||\n\t\t( blockSupportDisable\n\t\t\t? false\n\t\t\t: areInnerBlocksControlled( state, clientId ) );\n\n\treturn (\n\t\tshouldEnableIfUnselected &&\n\t\t! isBlockSelected( state, clientId ) &&\n\t\t! hasSelectedInnerBlock( state, clientId, true )\n\t);\n}\n\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\n\tlet parent = state.blocks.parents.get( clientId );\n\twhile ( !! parent ) {\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\n\t\t\treturn true;\n\t\t}\n\t\tparent = state.blocks.parents.get( parent );\n\t}\n\treturn false;\n}\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Returns the block editing mode for a given block.\n *\n * The mode can be one of three options:\n *\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\n *   selected.\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\n *   toolbar, the block movers, block settings.\n * - `'default'`: Allows editing the block as normal.\n *\n * Blocks can set a mode using the `useBlockEditingMode` hook.\n *\n * The mode is inherited by all of the block's inner blocks, unless they have\n * their own mode.\n *\n * A template lock can also set a mode. If the template lock is `'contentOnly'`,\n * the block's mode is overridden to `'contentOnly'` if the block has a content\n * role attribute, or `'disabled'` otherwise.\n *\n * @see useBlockEditingMode\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {BlockEditingMode} The block editing mode. One of `'disabled'`,\n *                            `'contentOnly'`, or `'default'`.\n */\nexport const getBlockEditingMode = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tif ( state.blockEditingModes.has( clientId ) ) {\n\t\t\t\treturn state.blockEditingModes.get( clientId );\n\t\t\t}\n\t\t\tif ( ! clientId ) {\n\t\t\t\treturn 'default';\n\t\t\t}\n\t\t\tconst rootClientId = getBlockRootClientId( state, clientId );\n\t\t\tconst templateLock = getTemplateLock( state, rootClientId );\n\t\t\tif ( templateLock === 'contentOnly' ) {\n\t\t\t\tconst name = getBlockName( state, clientId );\n\t\t\t\tconst isContent =\n\t\t\t\t\tselect( blocksStore ).__experimentalHasContentRoleAttribute(\n\t\t\t\t\t\tname\n\t\t\t\t\t);\n\t\t\t\treturn isContent ? 'contentOnly' : 'disabled';\n\t\t\t}\n\t\t\tconst parentMode = getBlockEditingMode( state, rootClientId );\n\t\t\treturn parentMode === 'contentOnly' ? 'default' : parentMode;\n\t\t}\n);\n\n/**\n * Indicates if a block is ungroupable.\n * A block is ungroupable if it is a single grouping block with inner blocks.\n * If a block has an `ungroup` transform, it is also ungroupable, without the\n * requirement of being the default grouping block.\n * Additionally a block can only be ungrouped if it has inner blocks and can\n * be removed.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block. If not passed the selected block's client id will be used.\n * @return {boolean} True if the block is ungroupable.\n */\nexport const isUngroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tconst _clientId = clientId || getSelectedBlockClientId( state );\n\t\t\tif ( ! _clientId ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst block = getBlock( state, _clientId );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _isUngroupable =\n\t\t\t\tblock &&\n\t\t\t\t( block.name === groupingBlockName ||\n\t\t\t\t\tgetBlockType( block.name )?.transforms?.ungroup ) &&\n\t\t\t\t!! block.innerBlocks.length;\n\n\t\t\treturn _isUngroupable && canRemoveBlock( state, _clientId );\n\t\t}\n);\n\n/**\n * Indicates if the provided blocks(by client ids) are groupable.\n * We need to have at least one block, have a grouping block name set and\n * be able to remove these blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} clientIds Block client ids. If not passed the selected blocks client ids will be used.\n * @return {boolean} True if the blocks are groupable.\n */\nexport const isGroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientIds = EMPTY_ARRAY ) => {\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _clientIds = clientIds?.length\n\t\t\t\t? clientIds\n\t\t\t\t: getSelectedBlockClientIds( state );\n\t\t\tconst rootClientId = _clientIds?.length\n\t\t\t\t? getBlockRootClientId( state, _clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\tstate,\n\t\t\t\tgroupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tconst _isGroupable = groupingBlockAvailable && _clientIds.length;\n\t\t\treturn (\n\t\t\t\t_isGroupable &&\n\t\t\t\tcanRemoveBlocks( state, _clientIds, rootClientId )\n\t\t\t);\n\t\t}\n);\n"],"mappings":"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"}