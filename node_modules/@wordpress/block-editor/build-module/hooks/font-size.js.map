{"version":3,"names":["addFilter","hasBlockSupport","TokenList","createHigherOrderComponent","select","getFontSize","getFontSizeClass","getFontSizeObjectByValue","FontSizePicker","TYPOGRAPHY_SUPPORT_KEY","cleanEmptyObject","transformStyles","shouldSkipSerialization","useSetting","store","blockEditorStore","getTypographyFontSizeValue","getFluidTypographyOptionsFromSettings","FONT_SIZE_SUPPORT_KEY","addAttributes","settings","attributes","fontSize","Object","assign","type","addSaveProps","props","blockType","classes","className","add","newClassName","value","undefined","addEditProps","existingGetEditWrapperProps","getEditWrapperProps","FontSizeEdit","style","setAttributes","fontSizes","onChange","fontSizeSlug","slug","typography","fontSizeObject","fontSizeValue","size","createElement","withReset","withSlider","__nextHasNoMarginBottom","useIsFontSizeDisabled","name","blockName","hasFontSizes","length","withFontSizeInlineStyles","BlockListBlock","wrapperProps","newProps","MIGRATION_PATHS","addTransforms","result","source","index","results","destinationBlockType","activeSupports","addEditPropsForFluidCustomFontSizes","fluidTypographySettings","getSettings","__experimentalFeatures","newFontSize"],"sources":["@wordpress/block-editor/src/hooks/font-size.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { hasBlockSupport } from '@wordpress/blocks';\nimport TokenList from '@wordpress/token-list';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFontSize,\n\tgetFontSizeClass,\n\tgetFontSizeObjectByValue,\n\tFontSizePicker,\n} from '../components/font-sizes';\nimport { TYPOGRAPHY_SUPPORT_KEY } from './typography';\nimport {\n\tcleanEmptyObject,\n\ttransformStyles,\n\tshouldSkipSerialization,\n} from './utils';\nimport useSetting from '../components/use-setting';\nimport { store as blockEditorStore } from '../store';\nimport {\n\tgetTypographyFontSizeValue,\n\tgetFluidTypographyOptionsFromSettings,\n} from '../components/global-styles/typography-utils';\n\nexport const FONT_SIZE_SUPPORT_KEY = 'typography.fontSize';\n\n/**\n * Filters registered block settings, extending attributes to include\n * `fontSize` and `fontWeight` attributes.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nfunction addAttributes( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\t// Allow blocks to specify a default value if needed.\n\tif ( ! settings.attributes.fontSize ) {\n\t\tObject.assign( settings.attributes, {\n\t\t\tfontSize: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override props assigned to save component to inject font size.\n *\n * @param {Object} props      Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nfunction addSaveProps( props, blockType, attributes ) {\n\tif ( ! hasBlockSupport( blockType, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn props;\n\t}\n\n\tif (\n\t\tshouldSkipSerialization( blockType, TYPOGRAPHY_SUPPORT_KEY, 'fontSize' )\n\t) {\n\t\treturn props;\n\t}\n\n\t// Use TokenList to dedupe classes.\n\tconst classes = new TokenList( props.className );\n\tclasses.add( getFontSizeClass( attributes.fontSize ) );\n\tconst newClassName = classes.value;\n\tprops.className = newClassName ? newClassName : undefined;\n\n\treturn props;\n}\n\n/**\n * Filters registered block settings to expand the block edit wrapper\n * by applying the desired styles and classnames.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nfunction addEditProps( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\tconst existingGetEditWrapperProps = settings.getEditWrapperProps;\n\tsettings.getEditWrapperProps = ( attributes ) => {\n\t\tlet props = {};\n\t\tif ( existingGetEditWrapperProps ) {\n\t\t\tprops = existingGetEditWrapperProps( attributes );\n\t\t}\n\t\treturn addSaveProps( props, settings, attributes );\n\t};\n\n\treturn settings;\n}\n\n/**\n * Inspector control panel containing the font size related configuration\n *\n * @param {Object} props\n *\n * @return {WPElement} Font size edit element.\n */\nexport function FontSizeEdit( props ) {\n\tconst {\n\t\tattributes: { fontSize, style },\n\t\tsetAttributes,\n\t} = props;\n\tconst fontSizes = useSetting( 'typography.fontSizes' );\n\n\tconst onChange = ( value ) => {\n\t\tconst fontSizeSlug = getFontSizeObjectByValue( fontSizes, value ).slug;\n\n\t\tsetAttributes( {\n\t\t\tstyle: cleanEmptyObject( {\n\t\t\t\t...style,\n\t\t\t\ttypography: {\n\t\t\t\t\t...style?.typography,\n\t\t\t\t\tfontSize: fontSizeSlug ? undefined : value,\n\t\t\t\t},\n\t\t\t} ),\n\t\t\tfontSize: fontSizeSlug,\n\t\t} );\n\t};\n\n\tconst fontSizeObject = getFontSize(\n\t\tfontSizes,\n\t\tfontSize,\n\t\tstyle?.typography?.fontSize\n\t);\n\n\tconst fontSizeValue =\n\t\tfontSizeObject?.size || style?.typography?.fontSize || fontSize;\n\n\treturn (\n\t\t<FontSizePicker\n\t\t\tonChange={ onChange }\n\t\t\tvalue={ fontSizeValue }\n\t\t\twithReset={ false }\n\t\t\twithSlider\n\t\t\tsize=\"__unstable-large\"\n\t\t\t__nextHasNoMarginBottom\n\t\t/>\n\t);\n}\n\n/**\n * Custom hook that checks if font-size settings have been disabled.\n *\n * @param {string} name The name of the block.\n * @return {boolean} Whether setting is disabled.\n */\nexport function useIsFontSizeDisabled( { name: blockName } = {} ) {\n\tconst fontSizes = useSetting( 'typography.fontSizes' );\n\tconst hasFontSizes = !! fontSizes?.length;\n\n\treturn (\n\t\t! hasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) || ! hasFontSizes\n\t);\n}\n\n/**\n * Add inline styles for font sizes.\n * Ideally, this is not needed and themes load the font-size classes on the\n * editor.\n *\n * @param {Function} BlockListBlock Original component.\n *\n * @return {Function} Wrapped component.\n */\nconst withFontSizeInlineStyles = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst fontSizes = useSetting( 'typography.fontSizes' );\n\t\tconst {\n\t\t\tname: blockName,\n\t\t\tattributes: { fontSize, style },\n\t\t\twrapperProps,\n\t\t} = props;\n\n\t\t// Only add inline styles if the block supports font sizes,\n\t\t// doesn't skip serialization of font sizes,\n\t\t// doesn't already have an inline font size,\n\t\t// and does have a class to extract the font size from.\n\t\tif (\n\t\t\t! hasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) ||\n\t\t\tshouldSkipSerialization(\n\t\t\t\tblockName,\n\t\t\t\tTYPOGRAPHY_SUPPORT_KEY,\n\t\t\t\t'fontSize'\n\t\t\t) ||\n\t\t\t! fontSize ||\n\t\t\tstyle?.typography?.fontSize\n\t\t) {\n\t\t\treturn <BlockListBlock { ...props } />;\n\t\t}\n\n\t\tconst fontSizeValue = getFontSize(\n\t\t\tfontSizes,\n\t\t\tfontSize,\n\t\t\tstyle?.typography?.fontSize\n\t\t).size;\n\n\t\tconst newProps = {\n\t\t\t...props,\n\t\t\twrapperProps: {\n\t\t\t\t...wrapperProps,\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: fontSizeValue,\n\t\t\t\t\t...wrapperProps?.style,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn <BlockListBlock { ...newProps } />;\n\t},\n\t'withFontSizeInlineStyles'\n);\n\nconst MIGRATION_PATHS = {\n\tfontSize: [ [ 'fontSize' ], [ 'style', 'typography', 'fontSize' ] ],\n};\n\nfunction addTransforms( result, source, index, results ) {\n\tconst destinationBlockType = result.name;\n\tconst activeSupports = {\n\t\tfontSize: hasBlockSupport(\n\t\t\tdestinationBlockType,\n\t\t\tFONT_SIZE_SUPPORT_KEY\n\t\t),\n\t};\n\treturn transformStyles(\n\t\tactiveSupports,\n\t\tMIGRATION_PATHS,\n\t\tresult,\n\t\tsource,\n\t\tindex,\n\t\tresults\n\t);\n}\n\n/**\n * Allow custom font sizes to appear fluid when fluid typography is enabled at\n * the theme level.\n *\n * Adds a custom getEditWrapperProps() callback to all block types that support\n * font sizes. Then, if fluid typography is enabled, this callback will swap any\n * custom font size in style.fontSize with a fluid font size (i.e. one that uses\n * clamp()).\n *\n * It's important that this hook runs after 'core/style/addEditProps' sets\n * style.fontSize as otherwise fontSize will be overwritten.\n *\n * @param {Object} blockType Block settings object.\n */\nfunction addEditPropsForFluidCustomFontSizes( blockType ) {\n\tif (\n\t\t! hasBlockSupport( blockType, FONT_SIZE_SUPPORT_KEY ) ||\n\t\tshouldSkipSerialization( blockType, TYPOGRAPHY_SUPPORT_KEY, 'fontSize' )\n\t) {\n\t\treturn blockType;\n\t}\n\n\tconst existingGetEditWrapperProps = blockType.getEditWrapperProps;\n\n\tblockType.getEditWrapperProps = ( attributes ) => {\n\t\tconst wrapperProps = existingGetEditWrapperProps\n\t\t\t? existingGetEditWrapperProps( attributes )\n\t\t\t: {};\n\n\t\tconst fontSize = wrapperProps?.style?.fontSize;\n\n\t\t// TODO: This sucks! We should be using useSetting( 'typography.fluid' )\n\t\t// or even useSelect( blockEditorStore ). We can't do either here\n\t\t// because getEditWrapperProps is a plain JavaScript function called by\n\t\t// BlockListBlock and not a React component rendered within\n\t\t// BlockListContext.Provider. If we set fontSize using editor.\n\t\t// BlockListBlock instead of using getEditWrapperProps then the value is\n\t\t// clobbered when the core/style/addEditProps filter runs.\n\t\tconst fluidTypographySettings = getFluidTypographyOptionsFromSettings(\n\t\t\tselect( blockEditorStore ).getSettings().__experimentalFeatures\n\t\t);\n\t\tconst newFontSize = fontSize\n\t\t\t? getTypographyFontSizeValue(\n\t\t\t\t\t{ size: fontSize },\n\t\t\t\t\tfluidTypographySettings\n\t\t\t  )\n\t\t\t: null;\n\n\t\tif ( newFontSize === null ) {\n\t\t\treturn wrapperProps;\n\t\t}\n\n\t\treturn {\n\t\t\t...wrapperProps,\n\t\t\tstyle: {\n\t\t\t\t...wrapperProps?.style,\n\t\t\t\tfontSize: newFontSize,\n\t\t\t},\n\t\t};\n\t};\n\n\treturn blockType;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/font/addAttribute',\n\taddAttributes\n);\n\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/font/addSaveProps',\n\taddSaveProps\n);\n\naddFilter( 'blocks.registerBlockType', 'core/font/addEditProps', addEditProps );\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/font-size/with-font-size-inline-styles',\n\twithFontSizeInlineStyles\n);\n\naddFilter(\n\t'blocks.switchToBlockType.transformedBlock',\n\t'core/font-size/addTransforms',\n\taddTransforms\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/font-size/addEditPropsForFluidCustomFontSizes',\n\taddEditPropsForFluidCustomFontSizes,\n\t// Run after 'core/style/addEditProps' so that the style object has already\n\t// been translated into inline CSS.\n\t11\n);\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,SAASC,0BAA0B,QAAQ,oBAAoB;AAC/D,SAASC,MAAM,QAAQ,iBAAiB;;AAExC;AACA;AACA;AACA,SACCC,WAAW,EACXC,gBAAgB,EAChBC,wBAAwB,EACxBC,cAAc,QACR,0BAA0B;AACjC,SAASC,sBAAsB,QAAQ,cAAc;AACrD,SACCC,gBAAgB,EAChBC,eAAe,EACfC,uBAAuB,QACjB,SAAS;AAChB,OAAOC,UAAU,MAAM,2BAA2B;AAClD,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,UAAU;AACpD,SACCC,0BAA0B,EAC1BC,qCAAqC,QAC/B,8CAA8C;AAErD,OAAO,MAAMC,qBAAqB,GAAG,qBAAqB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAEC,QAAQ,EAAG;EAClC,IAAK,CAAEnB,eAAe,CAAEmB,QAAQ,EAAEF,qBAAsB,CAAC,EAAG;IAC3D,OAAOE,QAAQ;EAChB;;EAEA;EACA,IAAK,CAAEA,QAAQ,CAACC,UAAU,CAACC,QAAQ,EAAG;IACrCC,MAAM,CAACC,MAAM,CAAEJ,QAAQ,CAACC,UAAU,EAAE;MACnCC,QAAQ,EAAE;QACTG,IAAI,EAAE;MACP;IACD,CAAE,CAAC;EACJ;EAEA,OAAOL,QAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,YAAYA,CAAEC,KAAK,EAAEC,SAAS,EAAEP,UAAU,EAAG;EACrD,IAAK,CAAEpB,eAAe,CAAE2B,SAAS,EAAEV,qBAAsB,CAAC,EAAG;IAC5D,OAAOS,KAAK;EACb;EAEA,IACCf,uBAAuB,CAAEgB,SAAS,EAAEnB,sBAAsB,EAAE,UAAW,CAAC,EACvE;IACD,OAAOkB,KAAK;EACb;;EAEA;EACA,MAAME,OAAO,GAAG,IAAI3B,SAAS,CAAEyB,KAAK,CAACG,SAAU,CAAC;EAChDD,OAAO,CAACE,GAAG,CAAEzB,gBAAgB,CAAEe,UAAU,CAACC,QAAS,CAAE,CAAC;EACtD,MAAMU,YAAY,GAAGH,OAAO,CAACI,KAAK;EAClCN,KAAK,CAACG,SAAS,GAAGE,YAAY,GAAGA,YAAY,GAAGE,SAAS;EAEzD,OAAOP,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,YAAYA,CAAEf,QAAQ,EAAG;EACjC,IAAK,CAAEnB,eAAe,CAAEmB,QAAQ,EAAEF,qBAAsB,CAAC,EAAG;IAC3D,OAAOE,QAAQ;EAChB;EAEA,MAAMgB,2BAA2B,GAAGhB,QAAQ,CAACiB,mBAAmB;EAChEjB,QAAQ,CAACiB,mBAAmB,GAAKhB,UAAU,IAAM;IAChD,IAAIM,KAAK,GAAG,CAAC,CAAC;IACd,IAAKS,2BAA2B,EAAG;MAClCT,KAAK,GAAGS,2BAA2B,CAAEf,UAAW,CAAC;IAClD;IACA,OAAOK,YAAY,CAAEC,KAAK,EAAEP,QAAQ,EAAEC,UAAW,CAAC;EACnD,CAAC;EAED,OAAOD,QAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,YAAYA,CAAEX,KAAK,EAAG;EACrC,MAAM;IACLN,UAAU,EAAE;MAAEC,QAAQ;MAAEiB;IAAM,CAAC;IAC/BC;EACD,CAAC,GAAGb,KAAK;EACT,MAAMc,SAAS,GAAG5B,UAAU,CAAE,sBAAuB,CAAC;EAEtD,MAAM6B,QAAQ,GAAKT,KAAK,IAAM;IAC7B,MAAMU,YAAY,GAAGpC,wBAAwB,CAAEkC,SAAS,EAAER,KAAM,CAAC,CAACW,IAAI;IAEtEJ,aAAa,CAAE;MACdD,KAAK,EAAE7B,gBAAgB,CAAE;QACxB,GAAG6B,KAAK;QACRM,UAAU,EAAE;UACX,GAAGN,KAAK,EAAEM,UAAU;UACpBvB,QAAQ,EAAEqB,YAAY,GAAGT,SAAS,GAAGD;QACtC;MACD,CAAE,CAAC;MACHX,QAAQ,EAAEqB;IACX,CAAE,CAAC;EACJ,CAAC;EAED,MAAMG,cAAc,GAAGzC,WAAW,CACjCoC,SAAS,EACTnB,QAAQ,EACRiB,KAAK,EAAEM,UAAU,EAAEvB,QACpB,CAAC;EAED,MAAMyB,aAAa,GAClBD,cAAc,EAAEE,IAAI,IAAIT,KAAK,EAAEM,UAAU,EAAEvB,QAAQ,IAAIA,QAAQ;EAEhE,OACC2B,aAAA,CAACzC,cAAc;IACdkC,QAAQ,EAAGA,QAAU;IACrBT,KAAK,EAAGc,aAAe;IACvBG,SAAS,EAAG,KAAO;IACnBC,UAAU;IACVH,IAAI,EAAC,kBAAkB;IACvBI,uBAAuB;EAAA,CACvB,CAAC;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAAE;EAAEC,IAAI,EAAEC;AAAU,CAAC,GAAG,CAAC,CAAC,EAAG;EACjE,MAAMd,SAAS,GAAG5B,UAAU,CAAE,sBAAuB,CAAC;EACtD,MAAM2C,YAAY,GAAG,CAAC,CAAEf,SAAS,EAAEgB,MAAM;EAEzC,OACC,CAAExD,eAAe,CAAEsD,SAAS,EAAErC,qBAAsB,CAAC,IAAI,CAAEsC,YAAY;AAEzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,wBAAwB,GAAGvD,0BAA0B,CACxDwD,cAAc,IAAQhC,KAAK,IAAM;EAClC,MAAMc,SAAS,GAAG5B,UAAU,CAAE,sBAAuB,CAAC;EACtD,MAAM;IACLyC,IAAI,EAAEC,SAAS;IACflC,UAAU,EAAE;MAAEC,QAAQ;MAAEiB;IAAM,CAAC;IAC/BqB;EACD,CAAC,GAAGjC,KAAK;;EAET;EACA;EACA;EACA;EACA,IACC,CAAE1B,eAAe,CAAEsD,SAAS,EAAErC,qBAAsB,CAAC,IACrDN,uBAAuB,CACtB2C,SAAS,EACT9C,sBAAsB,EACtB,UACD,CAAC,IACD,CAAEa,QAAQ,IACViB,KAAK,EAAEM,UAAU,EAAEvB,QAAQ,EAC1B;IACD,OAAO2B,aAAA,CAACU,cAAc;MAAA,GAAMhC;IAAK,CAAI,CAAC;EACvC;EAEA,MAAMoB,aAAa,GAAG1C,WAAW,CAChCoC,SAAS,EACTnB,QAAQ,EACRiB,KAAK,EAAEM,UAAU,EAAEvB,QACpB,CAAC,CAAC0B,IAAI;EAEN,MAAMa,QAAQ,GAAG;IAChB,GAAGlC,KAAK;IACRiC,YAAY,EAAE;MACb,GAAGA,YAAY;MACfrB,KAAK,EAAE;QACNjB,QAAQ,EAAEyB,aAAa;QACvB,GAAGa,YAAY,EAAErB;MAClB;IACD;EACD,CAAC;EAED,OAAOU,aAAA,CAACU,cAAc;IAAA,GAAME;EAAQ,CAAI,CAAC;AAC1C,CAAC,EACD,0BACD,CAAC;AAED,MAAMC,eAAe,GAAG;EACvBxC,QAAQ,EAAE,CAAE,CAAE,UAAU,CAAE,EAAE,CAAE,OAAO,EAAE,YAAY,EAAE,UAAU,CAAE;AAClE,CAAC;AAED,SAASyC,aAAaA,CAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAG;EACxD,MAAMC,oBAAoB,GAAGJ,MAAM,CAACV,IAAI;EACxC,MAAMe,cAAc,GAAG;IACtB/C,QAAQ,EAAErB,eAAe,CACxBmE,oBAAoB,EACpBlD,qBACD;EACD,CAAC;EACD,OAAOP,eAAe,CACrB0D,cAAc,EACdP,eAAe,EACfE,MAAM,EACNC,MAAM,EACNC,KAAK,EACLC,OACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,mCAAmCA,CAAE1C,SAAS,EAAG;EACzD,IACC,CAAE3B,eAAe,CAAE2B,SAAS,EAAEV,qBAAsB,CAAC,IACrDN,uBAAuB,CAAEgB,SAAS,EAAEnB,sBAAsB,EAAE,UAAW,CAAC,EACvE;IACD,OAAOmB,SAAS;EACjB;EAEA,MAAMQ,2BAA2B,GAAGR,SAAS,CAACS,mBAAmB;EAEjET,SAAS,CAACS,mBAAmB,GAAKhB,UAAU,IAAM;IACjD,MAAMuC,YAAY,GAAGxB,2BAA2B,GAC7CA,2BAA2B,CAAEf,UAAW,CAAC,GACzC,CAAC,CAAC;IAEL,MAAMC,QAAQ,GAAGsC,YAAY,EAAErB,KAAK,EAAEjB,QAAQ;;IAE9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMiD,uBAAuB,GAAGtD,qCAAqC,CACpEb,MAAM,CAAEW,gBAAiB,CAAC,CAACyD,WAAW,CAAC,CAAC,CAACC,sBAC1C,CAAC;IACD,MAAMC,WAAW,GAAGpD,QAAQ,GACzBN,0BAA0B,CAC1B;MAAEgC,IAAI,EAAE1B;IAAS,CAAC,EAClBiD,uBACA,CAAC,GACD,IAAI;IAEP,IAAKG,WAAW,KAAK,IAAI,EAAG;MAC3B,OAAOd,YAAY;IACpB;IAEA,OAAO;MACN,GAAGA,YAAY;MACfrB,KAAK,EAAE;QACN,GAAGqB,YAAY,EAAErB,KAAK;QACtBjB,QAAQ,EAAEoD;MACX;IACD,CAAC;EACF,CAAC;EAED,OAAO9C,SAAS;AACjB;AAEA5B,SAAS,CACR,0BAA0B,EAC1B,wBAAwB,EACxBmB,aACD,CAAC;AAEDnB,SAAS,CACR,kCAAkC,EAClC,wBAAwB,EACxB0B,YACD,CAAC;AAED1B,SAAS,CAAE,0BAA0B,EAAE,wBAAwB,EAAEmC,YAAa,CAAC;AAE/EnC,SAAS,CACR,uBAAuB,EACvB,6CAA6C,EAC7C0D,wBACD,CAAC;AAED1D,SAAS,CACR,2CAA2C,EAC3C,8BAA8B,EAC9B+D,aACD,CAAC;AAED/D,SAAS,CACR,0BAA0B,EAC1B,oDAAoD,EACpDsE,mCAAmC;AACnC;AACA;AACA,EACD,CAAC"}