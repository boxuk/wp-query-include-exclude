import { createElement, Fragment } from "@wordpress/element";
/**
 * WordPress dependencies
 */
import { createHigherOrderComponent } from '@wordpress/compose';
import { addFilter } from '@wordpress/hooks';
import { __ } from '@wordpress/i18n';
import { hasBlockSupport } from '@wordpress/blocks';
import { TextControl } from '@wordpress/components';

/**
 * Internal dependencies
 */
import { InspectorControls } from '../components';
export const withBlockRenameControl = createHigherOrderComponent(BlockEdit => props => {
  const {
    name,
    attributes,
    setAttributes,
    isSelected
  } = props;
  const supportsBlockNaming = hasBlockSupport(name, '__experimentalMetadata', false);
  return createElement(Fragment, null, isSelected && supportsBlockNaming && createElement(InspectorControls, {
    group: "advanced"
  }, createElement(TextControl, {
    __nextHasNoMarginBottom: true,
    label: __('Block name'),
    value: attributes?.metadata?.name || '',
    onChange: newName => {
      setAttributes({
        metadata: {
          ...attributes?.metadata,
          name: newName
        }
      });
    }
  })), createElement(BlockEdit, {
    key: "edit",
    ...props
  }));
}, 'withToolbarControls');
addFilter('editor.BlockEdit', 'core/block-rename-ui/with-block-rename-control', withBlockRenameControl);
//# sourceMappingURL=block-rename.js.map