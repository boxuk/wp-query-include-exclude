{"version":3,"names":["paramCase","normalizePath","path","Array","isArray","toString","kebabCase","str","input","_str$toString","replace","splitRegexp","cloneObject","object","map","Object","fromEntries","entries","key","value","setImmutably","normalizedPath","newObject","reduce","acc","i","undefined","Number","isInteger","length","getValueFromObjectPath","defaultValue","_value","split","forEach","fieldName"],"sources":["@wordpress/block-editor/src/utils/object.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { paramCase } from 'change-case';\n\n/**\n * Converts a path to an array of its fragments.\n * Supports strings, numbers and arrays:\n *\n * 'foo' => [ 'foo' ]\n * 2 => [ '2' ]\n * [ 'foo', 'bar' ] => [ 'foo', 'bar' ]\n *\n * @param {string|number|Array} path Path\n * @return {Array} Normalized path.\n */\nfunction normalizePath( path ) {\n\tif ( Array.isArray( path ) ) {\n\t\treturn path;\n\t} else if ( typeof path === 'number' ) {\n\t\treturn [ path.toString() ];\n\t}\n\n\treturn [ path ];\n}\n\n/**\n * Converts any string to kebab case.\n * Backwards compatible with Lodash's `_.kebabCase()`.\n * Backwards compatible with `_wp_to_kebab_case()`.\n *\n * @see https://lodash.com/docs/4.17.15#kebabCase\n * @see https://developer.wordpress.org/reference/functions/_wp_to_kebab_case/\n *\n * @param {string} str String to convert.\n * @return {string} Kebab-cased string\n */\nexport function kebabCase( str ) {\n\tlet input = str;\n\tif ( typeof str !== 'string' ) {\n\t\tinput = str?.toString?.() ?? '';\n\t}\n\n\t// See https://github.com/lodash/lodash/blob/b185fcee26b2133bd071f4aaca14b455c2ed1008/lodash.js#L4970\n\tinput = input.replace( /['\\u2019]/, '' );\n\n\treturn paramCase( input, {\n\t\tsplitRegexp: [\n\t\t\t/(?!(?:1ST|2ND|3RD|[4-9]TH)(?![a-z]))([a-z0-9])([A-Z])/g, // fooBar => foo-bar, 3Bar => 3-bar\n\t\t\t/(?!(?:1st|2nd|3rd|[4-9]th)(?![a-z]))([0-9])([a-z])/g, // 3bar => 3-bar\n\t\t\t/([A-Za-z])([0-9])/g, // Foo3 => foo-3, foo3 => foo-3\n\t\t\t/([A-Z])([A-Z][a-z])/g, // FOOBar => foo-bar\n\t\t],\n\t} );\n}\n\n/**\n * Clones an object.\n * Arrays are also cloned as arrays.\n * Non-object values are returned unchanged.\n *\n * @param {*} object Object to clone.\n * @return {*} Cloned object, or original literal non-object value.\n */\nfunction cloneObject( object ) {\n\tif ( Array.isArray( object ) ) {\n\t\treturn object.map( cloneObject );\n\t}\n\n\tif ( object && typeof object === 'object' ) {\n\t\treturn {\n\t\t\t...Object.fromEntries(\n\t\t\t\tObject.entries( object ).map( ( [ key, value ] ) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tcloneObject( value ),\n\t\t\t\t] )\n\t\t\t),\n\t\t};\n\t}\n\n\treturn object;\n}\n\n/**\n * Immutably sets a value inside an object. Like `lodash#set`, but returning a\n * new object. Treats nullish initial values as empty objects. Clones any\n * nested objects. Supports arrays, too.\n *\n * @param {Object}              object Object to set a value in.\n * @param {number|string|Array} path   Path in the object to modify.\n * @param {*}                   value  New value to set.\n * @return {Object} Cloned object with the new value set.\n */\nexport function setImmutably( object, path, value ) {\n\tconst normalizedPath = normalizePath( path );\n\tconst newObject = object ? cloneObject( object ) : {};\n\n\tnormalizedPath.reduce( ( acc, key, i ) => {\n\t\tif ( acc[ key ] === undefined ) {\n\t\t\tif ( Number.isInteger( path[ i + 1 ] ) ) {\n\t\t\t\tacc[ key ] = [];\n\t\t\t} else {\n\t\t\t\tacc[ key ] = {};\n\t\t\t}\n\t\t}\n\t\tif ( i === normalizedPath.length - 1 ) {\n\t\t\tacc[ key ] = value;\n\t\t}\n\t\treturn acc[ key ];\n\t}, newObject );\n\n\treturn newObject;\n}\n\n/**\n * Helper util to return a value from a certain path of the object.\n * Path is specified as either:\n * - a string of properties, separated by dots, for example: \"x.y\".\n * - an array of properties, for example `[ 'x', 'y' ]`.\n * You can also specify a default value in case the result is nullish.\n *\n * @param {Object}       object       Input object.\n * @param {string|Array} path         Path to the object property.\n * @param {*}            defaultValue Default value if the value at the specified path is nullish.\n * @return {*} Value of the object property at the specified path.\n */\nexport const getValueFromObjectPath = ( object, path, defaultValue ) => {\n\tconst normalizedPath = Array.isArray( path ) ? path : path.split( '.' );\n\tlet value = object;\n\tnormalizedPath.forEach( ( fieldName ) => {\n\t\tvalue = value?.[ fieldName ];\n\t} );\n\treturn value ?? defaultValue;\n};\n"],"mappings":"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"}