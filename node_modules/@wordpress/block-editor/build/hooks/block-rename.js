"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withBlockRenameControl = void 0;
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _hooks = require("@wordpress/hooks");
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _components2 = require("../components");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const withBlockRenameControl = (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  const {
    name,
    attributes,
    setAttributes,
    isSelected
  } = props;
  const supportsBlockNaming = (0, _blocks.hasBlockSupport)(name, '__experimentalMetadata', false);
  return (0, _element.createElement)(_element.Fragment, null, isSelected && supportsBlockNaming && (0, _element.createElement)(_components2.InspectorControls, {
    group: "advanced"
  }, (0, _element.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Block name'),
    value: attributes?.metadata?.name || '',
    onChange: newName => {
      setAttributes({
        metadata: {
          ...attributes?.metadata,
          name: newName
        }
      });
    }
  })), (0, _element.createElement)(BlockEdit, {
    key: "edit",
    ...props
  }));
}, 'withToolbarControls');
exports.withBlockRenameControl = withBlockRenameControl;
(0, _hooks.addFilter)('editor.BlockEdit', 'core/block-rename-ui/with-block-rename-control', withBlockRenameControl);
//# sourceMappingURL=block-rename.js.map