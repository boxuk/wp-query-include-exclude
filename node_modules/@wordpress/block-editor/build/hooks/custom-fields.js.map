{"version":3,"names":["_hooks","require","_components","_i18n","_blocks","_compose","_components2","_blockEditingMode","addAttribute","settings","hasBlockSupport","attributes","connections","type","withInspectorControl","createHigherOrderComponent","BlockEdit","props","blockEditingMode","useBlockEditingMode","hasCustomFieldsSupport","name","includes","_element","createElement","attributeName","isSelected","Fragment","InspectorControls","PanelBody","title","__","initialOpen","TextControl","__nextHasNoMarginBottom","autoComplete","label","value","onChange","nextValue","setAttributes","undefined","placeholder","source","sprintf","window","__experimentalConnections","addFilter"],"sources":["@wordpress/block-editor/src/hooks/custom-fields.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { PanelBody, TextControl } from '@wordpress/components';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { hasBlockSupport } from '@wordpress/blocks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { InspectorControls } from '../components';\nimport { useBlockEditingMode } from '../components/block-editing-mode';\n\n/**\n * Filters registered block settings, extending attributes to include `connections`.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nfunction addAttribute( settings ) {\n\tif ( hasBlockSupport( settings, '__experimentalConnections', true ) ) {\n\t\t// Gracefully handle if settings.attributes.connections is undefined.\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\tconnections: {\n\t\t\t\ttype: 'object',\n\t\t\t},\n\t\t};\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include a new block inspector control for\n * assigning a connection to blocks that has support for connections.\n * Currently, only the `core/paragraph` block is supported and there is only a relation\n * between paragraph content and a custom field.\n *\n * @param {WPComponent} BlockEdit Original component.\n *\n * @return {WPComponent} Wrapped component.\n */\nconst withInspectorControl = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\tconst blockEditingMode = useBlockEditingMode();\n\t\tconst hasCustomFieldsSupport = hasBlockSupport(\n\t\t\tprops.name,\n\t\t\t'__experimentalConnections',\n\t\t\tfalse\n\t\t);\n\n\t\t// Check if the current block is a paragraph or image block.\n\t\t// Currently, only these two blocks are supported.\n\t\tif ( ! [ 'core/paragraph', 'core/image' ].includes( props.name ) ) {\n\t\t\treturn <BlockEdit { ...props } />;\n\t\t}\n\n\t\t// If the block is a paragraph or image block, we need to know which\n\t\t// attribute to use for the connection. Only the `content` attribute\n\t\t// of the paragraph block and the `url` attribute of the image block are supported.\n\t\tlet attributeName;\n\t\tif ( props.name === 'core/paragraph' ) attributeName = 'content';\n\t\tif ( props.name === 'core/image' ) attributeName = 'url';\n\n\t\tif ( hasCustomFieldsSupport && props.isSelected ) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<BlockEdit { ...props } />\n\t\t\t\t\t{ blockEditingMode === 'default' && (\n\t\t\t\t\t\t<InspectorControls>\n\t\t\t\t\t\t\t<PanelBody\n\t\t\t\t\t\t\t\ttitle={ __( 'Connections' ) }\n\t\t\t\t\t\t\t\tinitialOpen={ true }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\t\tlabel={ __( 'Custom field meta_key' ) }\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tprops.attributes?.connections\n\t\t\t\t\t\t\t\t\t\t\t?.attributes?.[ attributeName ]\n\t\t\t\t\t\t\t\t\t\t\t?.value || ''\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\t\t\t\t\t\t\tif ( nextValue === '' ) {\n\t\t\t\t\t\t\t\t\t\t\tprops.setAttributes( {\n\t\t\t\t\t\t\t\t\t\t\t\tconnections: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\t[ attributeName ]: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder: undefined,\n\t\t\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tprops.setAttributes( {\n\t\t\t\t\t\t\t\t\t\t\t\tconnections: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The attributeName will be either `content` or `url`.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ attributeName ]: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Source will be variable, could be post_meta, user_meta, term_meta, etc.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Could even be a custom source like a social media attribute.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: 'meta_fields',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: nextValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t[ attributeName ]: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder: sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'This content will be replaced on the frontend by the value of \"%s\" custom field.',\n\t\t\t\t\t\t\t\t\t\t\t\t\tnextValue\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</PanelBody>\n\t\t\t\t\t\t</InspectorControls>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\t\treturn <BlockEdit { ...props } />;\n\t};\n}, 'withInspectorControl' );\n\nif ( window.__experimentalConnections ) {\n\taddFilter(\n\t\t'blocks.registerBlockType',\n\t\t'core/connections/attribute',\n\t\taddAttribute\n\t);\n\taddFilter(\n\t\t'editor.BlockEdit',\n\t\t'core/connections/with-inspector-control',\n\t\twithInspectorControl\n\t);\n}\n"],"mappings":"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"}