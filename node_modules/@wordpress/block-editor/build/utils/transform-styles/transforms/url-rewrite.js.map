{"version":3,"names":["isRemotePath","filePath","test","isAbsolutePath","isValidURL","meta","value","indexOf","getResourcePath","str","baseURL","URL","toString","processURL","newUrl","before","quote","after","getURLs","reg","match","URLs","exec","source","push","replaceURLs","raw","forEach","item","replace","rewrite","rootURL","node","type","updatedURLs","map","_default","exports","default"],"sources":["@wordpress/block-editor/src/utils/transform-styles/transforms/url-rewrite.js"],"sourcesContent":["/**\n * Return `true` if the given path is http/https.\n *\n * @param {string} filePath path\n *\n * @return {boolean} is remote path.\n */\nfunction isRemotePath( filePath ) {\n\treturn /^(?:https?:)?\\/\\//.test( filePath );\n}\n\n/**\n * Return `true` if the given filePath is an absolute url.\n *\n * @param {string} filePath path\n *\n * @return {boolean} is absolute path.\n */\nfunction isAbsolutePath( filePath ) {\n\treturn /^\\/(?!\\/)/.test( filePath );\n}\n\n/**\n * Whether or not the url should be inluded.\n *\n * @param {Object} meta url meta info\n *\n * @return {boolean} is valid.\n */\nfunction isValidURL( meta ) {\n\t// Ignore hashes or data uris.\n\tif (\n\t\tmeta.value.indexOf( 'data:' ) === 0 ||\n\t\tmeta.value.indexOf( '#' ) === 0\n\t) {\n\t\treturn false;\n\t}\n\n\tif ( isAbsolutePath( meta.value ) ) {\n\t\treturn false;\n\t}\n\n\t// Do not handle the http/https urls if `includeRemote` is false.\n\tif ( isRemotePath( meta.value ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get the absolute path of the url, relative to the basePath\n *\n * @param {string} str     the url\n * @param {string} baseURL base URL\n *\n * @return {string} the full path to the file\n */\nfunction getResourcePath( str, baseURL ) {\n\treturn new URL( str, baseURL ).toString();\n}\n\n/**\n * Process the single `url()` pattern\n *\n * @param {string} baseURL the base URL for relative URLs.\n *\n * @return {Promise} the Promise.\n */\nfunction processURL( baseURL ) {\n\treturn ( meta ) => ( {\n\t\t...meta,\n\t\tnewUrl:\n\t\t\t'url(' +\n\t\t\tmeta.before +\n\t\t\tmeta.quote +\n\t\t\tgetResourcePath( meta.value, baseURL ) +\n\t\t\tmeta.quote +\n\t\t\tmeta.after +\n\t\t\t')',\n\t} );\n}\n\n/**\n * Get all `url()`s, and return the meta info\n *\n * @param {string} value decl.value.\n *\n * @return {Array} the urls.\n */\nfunction getURLs( value ) {\n\tconst reg = /url\\((\\s*)(['\"]?)(.+?)\\2(\\s*)\\)/g;\n\tlet match;\n\tconst URLs = [];\n\n\twhile ( ( match = reg.exec( value ) ) !== null ) {\n\t\tconst meta = {\n\t\t\tsource: match[ 0 ],\n\t\t\tbefore: match[ 1 ],\n\t\t\tquote: match[ 2 ],\n\t\t\tvalue: match[ 3 ],\n\t\t\tafter: match[ 4 ],\n\t\t};\n\t\tif ( isValidURL( meta ) ) {\n\t\t\tURLs.push( meta );\n\t\t}\n\t}\n\treturn URLs;\n}\n\n/**\n * Replace the raw value's `url()` segment to the new value\n *\n * @param {string} raw  the raw value.\n * @param {Array}  URLs the URLs to replace.\n *\n * @return {string} the new value.\n */\nfunction replaceURLs( raw, URLs ) {\n\tURLs.forEach( ( item ) => {\n\t\traw = raw.replace( item.source, item.newUrl );\n\t} );\n\n\treturn raw;\n}\n\nconst rewrite = ( rootURL ) => ( node ) => {\n\tif ( node.type === 'declaration' ) {\n\t\tconst updatedURLs = getURLs( node.value ).map( processURL( rootURL ) );\n\t\treturn {\n\t\t\t...node,\n\t\t\tvalue: replaceURLs( node.value, updatedURLs ),\n\t\t};\n\t}\n\n\treturn node;\n};\n\nexport default rewrite;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAAEC,QAAQ,EAAG;EACjC,OAAO,mBAAmB,CAACC,IAAI,CAAED,QAAS,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAEF,QAAQ,EAAG;EACnC,OAAO,WAAW,CAACC,IAAI,CAAED,QAAS,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,UAAUA,CAAEC,IAAI,EAAG;EAC3B;EACA,IACCA,IAAI,CAACC,KAAK,CAACC,OAAO,CAAE,OAAQ,CAAC,KAAK,CAAC,IACnCF,IAAI,CAACC,KAAK,CAACC,OAAO,CAAE,GAAI,CAAC,KAAK,CAAC,EAC9B;IACD,OAAO,KAAK;EACb;EAEA,IAAKJ,cAAc,CAAEE,IAAI,CAACC,KAAM,CAAC,EAAG;IACnC,OAAO,KAAK;EACb;;EAEA;EACA,IAAKN,YAAY,CAAEK,IAAI,CAACC,KAAM,CAAC,EAAG;IACjC,OAAO,KAAK;EACb;EAEA,OAAO,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,eAAeA,CAAEC,GAAG,EAAEC,OAAO,EAAG;EACxC,OAAO,IAAIC,GAAG,CAAEF,GAAG,EAAEC,OAAQ,CAAC,CAACE,QAAQ,CAAC,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAEH,OAAO,EAAG;EAC9B,OAASL,IAAI,KAAQ;IACpB,GAAGA,IAAI;IACPS,MAAM,EACL,MAAM,GACNT,IAAI,CAACU,MAAM,GACXV,IAAI,CAACW,KAAK,GACVR,eAAe,CAAEH,IAAI,CAACC,KAAK,EAAEI,OAAQ,CAAC,GACtCL,IAAI,CAACW,KAAK,GACVX,IAAI,CAACY,KAAK,GACV;EACF,CAAC,CAAE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAAEZ,KAAK,EAAG;EACzB,MAAMa,GAAG,GAAG,kCAAkC;EAC9C,IAAIC,KAAK;EACT,MAAMC,IAAI,GAAG,EAAE;EAEf,OAAQ,CAAED,KAAK,GAAGD,GAAG,CAACG,IAAI,CAAEhB,KAAM,CAAC,MAAO,IAAI,EAAG;IAChD,MAAMD,IAAI,GAAG;MACZkB,MAAM,EAAEH,KAAK,CAAE,CAAC,CAAE;MAClBL,MAAM,EAAEK,KAAK,CAAE,CAAC,CAAE;MAClBJ,KAAK,EAAEI,KAAK,CAAE,CAAC,CAAE;MACjBd,KAAK,EAAEc,KAAK,CAAE,CAAC,CAAE;MACjBH,KAAK,EAAEG,KAAK,CAAE,CAAC;IAChB,CAAC;IACD,IAAKhB,UAAU,CAAEC,IAAK,CAAC,EAAG;MACzBgB,IAAI,CAACG,IAAI,CAAEnB,IAAK,CAAC;IAClB;EACD;EACA,OAAOgB,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,WAAWA,CAAEC,GAAG,EAAEL,IAAI,EAAG;EACjCA,IAAI,CAACM,OAAO,CAAIC,IAAI,IAAM;IACzBF,GAAG,GAAGA,GAAG,CAACG,OAAO,CAAED,IAAI,CAACL,MAAM,EAAEK,IAAI,CAACd,MAAO,CAAC;EAC9C,CAAE,CAAC;EAEH,OAAOY,GAAG;AACX;AAEA,MAAMI,OAAO,GAAKC,OAAO,IAAQC,IAAI,IAAM;EAC1C,IAAKA,IAAI,CAACC,IAAI,KAAK,aAAa,EAAG;IAClC,MAAMC,WAAW,GAAGhB,OAAO,CAAEc,IAAI,CAAC1B,KAAM,CAAC,CAAC6B,GAAG,CAAEtB,UAAU,CAAEkB,OAAQ,CAAE,CAAC;IACtE,OAAO;MACN,GAAGC,IAAI;MACP1B,KAAK,EAAEmB,WAAW,CAAEO,IAAI,CAAC1B,KAAK,EAAE4B,WAAY;IAC7C,CAAC;EACF;EAEA,OAAOF,IAAI;AACZ,CAAC;AAAC,IAAAI,QAAA,GAEaN,OAAO;AAAAO,OAAA,CAAAC,OAAA,GAAAF,QAAA"}