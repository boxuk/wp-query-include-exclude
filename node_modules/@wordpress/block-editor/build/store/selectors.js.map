{"version":3,"names":["_rememo","_interopRequireDefault","require","_blocks","_element","_hooks","_icons","_richText","_deprecated","_data","_utils","_sorting","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","Platform","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","createSelector","exports","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","deprecated","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","clientIds","givenIds","Array","isArray","collectedIds","givenId","descendantId","push","getClientIdsWithDescendants","topLevelId","getGlobalBlockCount","blockName","length","reduce","accumulator","__experimentalGetGlobalBlocksByName","blockNames","foundBlocks","filter","includes","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","id","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","getBlockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","switchToBlockType","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockAType","blockB","blockBType","htmlA","htmlB","attributeDefinitionA","attributeDefinitionB","valueA","create","html","mapRichTextSettings","valueB","remove","text","toHTMLString","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","hasDraggedInnerBlock","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","_getBlockListSettings","_state$settings$templ","templateLock","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","getBlockEditingMode","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","applyFilters","bind","canInsertBlockType","blockListSettings","blockEditingModes","canInsertBlocks","every","canRemoveBlock","lock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","hasBlockSupport","canLockBlocks","getInsertUsage","_state$preferences$in","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","getBlockVariations","variations","utility","getInserterItems","buildReusableBlockInserterItem","reusableBlock","wp_pattern_sync_status","src","symbol","foreground","ref","raw","content","syncStatus","syncedPatternInserterItems","getReusableBlocks","buildBlockTypeInserterItem","blockTypeInserterItems","getBlockTypes","items","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","getPossibleBlockTransformations","orderBy","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","alternative","getDirectInsertBlock","defaultBlock","directInsert","__experimentalGetDirectInsertBlock","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","getUserPatterns","_state$settings$__exp","_state$settings$__exp2","userPatterns","__experimentalReusableBlocks","userPatternCategories","__experimentalUserPatternCategories","categories","Map","userCategory","set","userPattern","wp_pattern_category","catId","slug","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","find","parse","__unstableSkipMigrationLogs","getAllAllowedPatterns","parsedPatterns","inserter","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","_state$settings$__exp3","isNavigationMode","editorMode","__unstableGetEditorMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","_state$blockVisibilit","blockVisibility","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableGetContentLockingParent","result","__unstableGetTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","__unstableHasActiveBlockOverlayActive","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay","createRegistrySelector","select","isContent","blocksStore","__experimentalHasContentRoleAttribute","parentMode","isUngroupable","_clientId","getGroupingBlockName","groupingBlockName","_isUngroupable","transforms","ungroup","isGroupable","_clientIds","groupingBlockAvailable","_isGroupable"],"sources":["@wordpress/block-editor/src/store/selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n\tswitchToBlockType,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { mapRichTextSettings } from './utils';\nimport { orderBy } from '../utils/sorting';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shared reference to an empty Set for cases where it is important to avoid\n * returning a new Set reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Set}\n */\nconst EMPTY_SET = new Set();\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes.get( clientId );\n\t\tconst { service } = attributes ?? {};\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes.get( clientId );\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree.get( clientId );\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...state.blocks.byClientId.get( clientId ),\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId.get( clientId ),\n\t\tstate.blocks.attributes.get( clientId ),\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\tclientId,\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object}          state     Global application state.\n * @param {string|string[]} clientIds Client ID(s) for which descendant blocks are to be returned.\n *\n * @return {Array} Client IDs of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, clientIds ) => {\n\t\tconst givenIds = Array.isArray( clientIds ) ? clientIds : [ clientIds ];\n\t\tconst collectedIds = [];\n\t\tfor ( const givenId of givenIds ) {\n\t\t\tfor ( const descendantId of getBlockOrder( state, givenId ) ) {\n\t\t\t\tcollectedIds.push(\n\t\t\t\t\tdescendantId,\n\t\t\t\t\t...getClientIdsOfDescendants( state, descendantId )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const topLevelId of getBlockOrder( state ) ) {\n\t\t\tcollectedIds.push(\n\t\t\t\ttopLevelId,\n\t\t\t\t...getClientIdsOfDescendants( state, topLevelId )\n\t\t\t);\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn clientIds.reduce( ( accumulator, clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t}, 0 );\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const __experimentalGetGlobalBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst blockNames = Array.isArray( blockName )\n\t\t\t? blockName\n\t\t\t: [ blockName ];\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn blockNames.includes( block.name );\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\n\t\t)\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * names.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\n *\n * @return {string[]} Block names.\n */\nexport const getBlockNamesByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tgetBlocksByClientId( state, clientIds )\n\t\t\t.filter( Boolean )\n\t\t\t.map( ( block ) => block.name ),\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount =\n\t\tgetMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents.has( clientId )\n\t\t? state.blocks.parents.get( clientId )\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents.get( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tparents.push( current );\n\t\t}\n\n\t\tif ( ! parents.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\tconst hasName = Array.isArray( blockName )\n\t\t\t? ( name ) => blockName.includes( name )\n\t\t\t: ( name ) => blockName === name;\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents.get( current );\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order.get( rootClientId );\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\n\t\tconst blockName = getBlockName( state, clientId );\n\t\tconst blockType = getBlockType( blockName );\n\t\treturn ! blockType.merge;\n\t} );\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) return false;\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t)\n\t\treturn false;\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlockName );\n\n\tif ( ! targetBlockType.merge ) return false;\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlockName ) return true;\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockAType = getBlockType( blockA.name );\n\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\tconst blockBType = getBlockType( blockB.name );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tconst attributeDefinitionA =\n\t\tblockAType.attributes[ selectionStart.attributeKey ];\n\tconst attributeDefinitionB =\n\t\tblockBType.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( {\n\t\thtml: htmlA,\n\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t} );\n\tlet valueB = create( {\n\t\thtml: htmlB,\n\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t} );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if one of the block's inner blocks is dragged.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block dragged\n */\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn parents.some( ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport const getBlockInsertionPoint = createSelector(\n\t( state ) => {\n\t\tlet rootClientId, index;\n\n\t\tconst {\n\t\t\tinsertionPoint,\n\t\t\tselection: { selectionEnd },\n\t\t} = state;\n\t\tif ( insertionPoint !== null ) {\n\t\t\treturn insertionPoint;\n\t\t}\n\n\t\tconst { clientId } = selectionEnd;\n\n\t\tif ( clientId ) {\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\n\t\t} else {\n\t\t\tindex = getBlockOrder( state ).length;\n\t\t}\n\n\t\treturn { rootClientId, index };\n\t},\n\t( state ) => [\n\t\tstate.insertionPoint,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tstate.blocks.parents,\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {string|false} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock ?? false;\n\t}\n\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( typeof list === 'boolean' ) {\n\t\treturn list;\n\t}\n\tif ( Array.isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockEditingModes,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.remove !== undefined ) {\n\t\treturn ! attributes.lock.remove;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean | undefined} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.move !== undefined ) {\n\t\treturn ! attributes.lock.move;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem =\n\t( state, { buildScope = 'inserter' } ) =>\n\t( blockType ) => {\n\t\tconst id = blockType.name;\n\n\t\tlet isDisabled = false;\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\tisDisabled = getBlocksByClientId(\n\t\t\t\tstate,\n\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t).some( ( { name } ) => name === blockType.name );\n\t\t}\n\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\tconst blockItemBase = {\n\t\t\tid,\n\t\t\tname: blockType.name,\n\t\t\ttitle: blockType.title,\n\t\t\ticon: blockType.icon,\n\t\t\tisDisabled,\n\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t};\n\t\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\t\tconst inserterVariations = getBlockVariations(\n\t\t\tblockType.name,\n\t\t\t'inserter'\n\t\t);\n\t\treturn {\n\t\t\t...blockItemBase,\n\t\t\tinitialAttributes: {},\n\t\t\tdescription: blockType.description,\n\t\t\tcategory: blockType.category,\n\t\t\tkeywords: blockType.keywords,\n\t\t\tvariations: inserterVariations,\n\t\t\texample: blockType.example,\n\t\t\tutility: 1, // Deprecated.\n\t\t};\n\t};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst icon = ! reusableBlock.wp_pattern_sync_status\n\t\t\t\t? {\n\t\t\t\t\t\tsrc: symbol,\n\t\t\t\t\t\tforeground: 'var(--wp-block-synced-color)',\n\t\t\t\t  }\n\t\t\t\t: symbol;\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title?.raw,\n\t\t\t\ticon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [ 'reusable' ],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\tfrecency,\n\t\t\t\tcontent: reusableBlock.content.raw,\n\t\t\t\tsyncStatus: reusableBlock.wp_pattern_sync_status,\n\t\t\t};\n\t\t};\n\n\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst items = blockTypeInserterItems.reduce( ( accumulator, item ) => {\n\t\t\tconst { variations = [] } = item;\n\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\taccumulator.push( item );\n\t\t\t}\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\taccumulator.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\n\t\t\tgroupByType,\n\t\t\t{ core: [], noncore: [] }\n\t\t);\n\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst normalizedBlocks = Array.isArray( blocks ) ? blocks : [ blocks ];\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = Object.fromEntries(\n\t\t\tObject.entries( blockTypeTransformItems ).map( ( [ , value ] ) => [\n\t\t\t\tvalue.name,\n\t\t\t\tvalue,\n\t\t\t] )\n\t\t);\n\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tnormalizedBlocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\treturn orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const getAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn [\n\t\t\t...blockTypes,\n\t\t\t...( hasReusableBlock ? [ 'core/block' ] : [] ),\n\t\t];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getAllowedBlocks( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\t...getAllowedBlocks.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {?WPDirectInsertBlock}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\n */\nexport const getDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.defaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.directInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getDirectInsertBlock( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( typeof allowedBlockTypes === 'boolean' ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nfunction getUserPatterns( state ) {\n\tconst userPatterns =\n\t\tstate?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n\tconst userPatternCategories =\n\t\tstate?.settings?.__experimentalUserPatternCategories ?? [];\n\tconst categories = new Map();\n\tuserPatternCategories.forEach( ( userCategory ) =>\n\t\tcategories.set( userCategory.id, userCategory )\n\t);\n\treturn userPatterns.map( ( userPattern ) => {\n\t\treturn {\n\t\t\tname: `core/block/${ userPattern.id }`,\n\t\t\tid: userPattern.id,\n\t\t\ttype: 'user',\n\t\t\ttitle: userPattern.title.raw,\n\t\t\tcategories: userPattern.wp_pattern_category.map( ( catId ) =>\n\t\t\t\tcategories && categories.get( catId )\n\t\t\t\t\t? categories.get( catId ).slug\n\t\t\t\t\t: catId\n\t\t\t),\n\t\t\tcontent: userPattern.content.raw,\n\t\t\tsyncStatus: userPattern.wp_pattern_sync_status,\n\t\t};\n\t} );\n}\n\nexport const __experimentalUserPatternCategories = createSelector(\n\t( state ) => {\n\t\treturn state?.settings?.__experimentalUserPatternCategories;\n\t},\n\t( state ) => [ state.settings.__experimentalUserPatternCategories ]\n);\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst userPatterns = getUserPatterns( state );\n\n\t\tconst pattern = [ ...patterns, ...userPatterns ].find(\n\t\t\t( { name } ) => name === patternName\n\t\t);\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content, {\n\t\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t} ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate?.settings?.__experimentalUserPatternCategories,\n\t]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst userPatterns = getUserPatterns( state );\n\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\n\t\tconst parsedPatterns = [ ...userPatterns, ...patterns ]\n\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t.map( ( { name } ) =>\n\t\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate?.settings?.__experimentalUserPatternCategories,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = availableParsedPatterns.filter(\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const getPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t\tif ( filteredPatterns.length === 0 ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\treturn filteredPatterns;\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getPatternsByBlockTypes( state, blockNames, rootClientId );\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn getPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\t...getPatternsByBlockTypes.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = getReusableBlocks( state ).find(\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.editorMode === 'navigation';\n}\n\n/**\n * Returns the current editor mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} the editor mode.\n */\nexport function __unstableGetEditorMode( state ) {\n\treturn state.editorMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blockVisibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\tconst visibleBlocks = new Set(\n\t\t\tObject.keys( state.blockVisibility ).filter(\n\t\t\t\t( key ) => state.blockVisibility[ key ]\n\t\t\t)\n\t\t);\n\t\tif ( visibleBlocks.size === 0 ) {\n\t\t\treturn EMPTY_SET;\n\t\t}\n\t\treturn visibleBlocks;\n\t},\n\t( state ) => [ state.blockVisibility ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __unstableGetContentLockingParent = createSelector(\n\t( state, clientId ) => {\n\t\tlet current = clientId;\n\t\tlet result;\n\t\twhile ( state.blocks.parents.has( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tif (\n\t\t\t\tcurrent &&\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\n\t\t\t) {\n\t\t\t\tresult = current;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\n\t// Prevent overlay on blocks with a non-default editing mode. If the mdoe is\n\t// 'disabled' then the overlay is redundant since the block can't be\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\n\t// since there will be no controls to interact with once selected.\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\n\t\treturn false;\n\t}\n\n\t// If the block editing is locked, the block overlay is always active.\n\tif ( ! canEditBlock( state, clientId ) ) {\n\t\treturn true;\n\t}\n\n\tconst editorMode = __unstableGetEditorMode( state );\n\n\t// In zoom-out mode, the block overlay is always active for top level blocks.\n\tif (\n\t\teditorMode === 'zoom-out' &&\n\t\tclientId &&\n\t\t! getBlockRootClientId( state, clientId )\n\t) {\n\t\treturn true;\n\t}\n\n\t// In navigation mode, the block overlay is active when the block is not\n\t// selected (and doesn't contain a selected child). The same behavior is\n\t// also enabled in all modes for blocks that have controlled children\n\t// (reusable block, template part, navigation), unless explicitly disabled\n\t// with `supports.__experimentalDisableBlockOverlay`.\n\tconst blockSupportDisable = hasBlockSupport(\n\t\tgetBlockName( state, clientId ),\n\t\t'__experimentalDisableBlockOverlay',\n\t\tfalse\n\t);\n\tconst shouldEnableIfUnselected =\n\t\teditorMode === 'navigation' ||\n\t\t( blockSupportDisable\n\t\t\t? false\n\t\t\t: areInnerBlocksControlled( state, clientId ) );\n\n\treturn (\n\t\tshouldEnableIfUnselected &&\n\t\t! isBlockSelected( state, clientId ) &&\n\t\t! hasSelectedInnerBlock( state, clientId, true )\n\t);\n}\n\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\n\tlet parent = state.blocks.parents.get( clientId );\n\twhile ( !! parent ) {\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\n\t\t\treturn true;\n\t\t}\n\t\tparent = state.blocks.parents.get( parent );\n\t}\n\treturn false;\n}\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Returns the block editing mode for a given block.\n *\n * The mode can be one of three options:\n *\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\n *   selected.\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\n *   toolbar, the block movers, block settings.\n * - `'default'`: Allows editing the block as normal.\n *\n * Blocks can set a mode using the `useBlockEditingMode` hook.\n *\n * The mode is inherited by all of the block's inner blocks, unless they have\n * their own mode.\n *\n * A template lock can also set a mode. If the template lock is `'contentOnly'`,\n * the block's mode is overridden to `'contentOnly'` if the block has a content\n * role attribute, or `'disabled'` otherwise.\n *\n * @see useBlockEditingMode\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {BlockEditingMode} The block editing mode. One of `'disabled'`,\n *                            `'contentOnly'`, or `'default'`.\n */\nexport const getBlockEditingMode = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tif ( state.blockEditingModes.has( clientId ) ) {\n\t\t\t\treturn state.blockEditingModes.get( clientId );\n\t\t\t}\n\t\t\tif ( ! clientId ) {\n\t\t\t\treturn 'default';\n\t\t\t}\n\t\t\tconst rootClientId = getBlockRootClientId( state, clientId );\n\t\t\tconst templateLock = getTemplateLock( state, rootClientId );\n\t\t\tif ( templateLock === 'contentOnly' ) {\n\t\t\t\tconst name = getBlockName( state, clientId );\n\t\t\t\tconst isContent =\n\t\t\t\t\tselect( blocksStore ).__experimentalHasContentRoleAttribute(\n\t\t\t\t\t\tname\n\t\t\t\t\t);\n\t\t\t\treturn isContent ? 'contentOnly' : 'disabled';\n\t\t\t}\n\t\t\tconst parentMode = getBlockEditingMode( state, rootClientId );\n\t\t\treturn parentMode === 'contentOnly' ? 'default' : parentMode;\n\t\t}\n);\n\n/**\n * Indicates if a block is ungroupable.\n * A block is ungroupable if it is a single grouping block with inner blocks.\n * If a block has an `ungroup` transform, it is also ungroupable, without the\n * requirement of being the default grouping block.\n * Additionally a block can only be ungrouped if it has inner blocks and can\n * be removed.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block. If not passed the selected block's client id will be used.\n * @return {boolean} True if the block is ungroupable.\n */\nexport const isUngroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tconst _clientId = clientId || getSelectedBlockClientId( state );\n\t\t\tif ( ! _clientId ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst block = getBlock( state, _clientId );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _isUngroupable =\n\t\t\t\tblock &&\n\t\t\t\t( block.name === groupingBlockName ||\n\t\t\t\t\tgetBlockType( block.name )?.transforms?.ungroup ) &&\n\t\t\t\t!! block.innerBlocks.length;\n\n\t\t\treturn _isUngroupable && canRemoveBlock( state, _clientId );\n\t\t}\n);\n\n/**\n * Indicates if the provided blocks(by client ids) are groupable.\n * We need to have at least one block, have a grouping block name set and\n * be able to remove these blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} clientIds Block client ids. If not passed the selected blocks client ids will be used.\n * @return {boolean} True if the blocks are groupable.\n */\nexport const isGroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientIds = EMPTY_ARRAY ) => {\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _clientIds = clientIds?.length\n\t\t\t\t? clientIds\n\t\t\t\t: getSelectedBlockClientIds( state );\n\t\t\tconst rootClientId = _clientIds?.length\n\t\t\t\t? getBlockRootClientId( state, _clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\tstate,\n\t\t\t\tgroupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tconst _isGroupable = groupingBlockAvailable && _clientIds.length;\n\t\t\treturn (\n\t\t\t\t_isGroupable &&\n\t\t\t\tcanRemoveBlocks( state, _clientIds, rootClientId )\n\t\t\t);\n\t\t}\n);\n"],"mappings":"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"}