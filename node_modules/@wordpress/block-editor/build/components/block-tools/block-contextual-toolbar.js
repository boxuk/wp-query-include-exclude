"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _compose = require("@wordpress/compose");
var _navigableToolbar = _interopRequireDefault(require("../navigable-toolbar"));
var _blockToolbar = _interopRequireDefault(require("../block-toolbar"));
var _store = require("../../store");
var _useHasBlockControls = require("../block-controls/use-has-block-controls");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function BlockContextualToolbar({
  focusOnMount,
  isFixed,
  ...props
}) {
  // When the toolbar is fixed it can be collapsed
  const [isCollapsed, setIsCollapsed] = (0, _element.useState)(false);
  const toolbarButtonRef = (0, _element.useRef)();
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    blockType,
    blockEditingMode,
    hasParents,
    showParentSelector,
    selectedBlockClientId
  } = (0, _data.useSelect)(select => {
    const {
      getBlockName,
      getBlockParents,
      getSelectedBlockClientIds,
      getBlockEditingMode
    } = select(_store.store);
    const {
      getBlockType
    } = select(_blocks.store);
    const selectedBlockClientIds = getSelectedBlockClientIds();
    const _selectedBlockClientId = selectedBlockClientIds[0];
    const parents = getBlockParents(_selectedBlockClientId);
    const firstParentClientId = parents[parents.length - 1];
    const parentBlockName = getBlockName(firstParentClientId);
    const parentBlockType = getBlockType(parentBlockName);
    return {
      selectedBlockClientId: _selectedBlockClientId,
      blockType: _selectedBlockClientId && getBlockType(getBlockName(_selectedBlockClientId)),
      blockEditingMode: getBlockEditingMode(_selectedBlockClientId),
      hasParents: parents.length,
      showParentSelector: parentBlockType && getBlockEditingMode(firstParentClientId) === 'default' && (0, _blocks.hasBlockSupport)(parentBlockType, '__experimentalParentSelector', true) && selectedBlockClientIds.length <= 1 && getBlockEditingMode(_selectedBlockClientId) === 'default'
    };
  }, []);
  (0, _element.useEffect)(() => {
    setIsCollapsed(false);
  }, [selectedBlockClientId]);
  const isLargerThanTabletViewport = (0, _compose.useViewportMatch)('large', '>=');
  const isFullscreen = document.body.classList.contains('is-fullscreen-mode');

  /**
   * The following code is a workaround to fix the width of the toolbar
   * it should be removed when the toolbar will be rendered inline
   * FIXME: remove this layout effect when the toolbar is no longer
   * 				absolutely positioned
   */
  (0, _element.useLayoutEffect)(() => {
    // don't do anything if not fixed toolbar
    if (!isFixed) {
      return;
    }
    const blockToolbar = document.querySelector('.block-editor-block-contextual-toolbar');
    if (!blockToolbar) {
      return;
    }
    if (!blockType) {
      blockToolbar.style.width = 'initial';
      return;
    }
    if (!isLargerThanTabletViewport) {
      // set the width of the toolbar to auto
      blockToolbar.style = {};
      return;
    }
    if (isCollapsed) {
      // set the width of the toolbar to auto
      blockToolbar.style.width = 'auto';
      return;
    }

    // get the width of the pinned items in the post editor or widget editor
    const pinnedItems = document.querySelector('.edit-post-header__settings, .edit-widgets-header__actions');
    // get the width of the left header in the site editor
    const leftHeader = document.querySelector('.edit-site-header-edit-mode__end');
    const computedToolbarStyle = window.getComputedStyle(blockToolbar);
    const computedPinnedItemsStyle = pinnedItems ? window.getComputedStyle(pinnedItems) : false;
    const computedLeftHeaderStyle = leftHeader ? window.getComputedStyle(leftHeader) : false;
    const marginLeft = parseFloat(computedToolbarStyle.marginLeft);
    const pinnedItemsWidth = computedPinnedItemsStyle ? parseFloat(computedPinnedItemsStyle.width) : 0;
    const leftHeaderWidth = computedLeftHeaderStyle ? parseFloat(computedLeftHeaderStyle.width) : 0;

    // set the new witdth of the toolbar
    blockToolbar.style.width = `calc(100% - ${leftHeaderWidth + pinnedItemsWidth + marginLeft + (pinnedItems || leftHeader ? 2 : 0) + (
    // Prevents button focus border from being cut off
    isFullscreen ? 0 : 160) // the width of the admin sidebar expanded
    }px)`;
  }, [isFixed, isLargerThanTabletViewport, isCollapsed, isFullscreen, blockType]);
  const isToolbarEnabled = !blockType || (0, _blocks.hasBlockSupport)(blockType, '__experimentalToolbar', true);
  const hasAnyBlockControls = (0, _useHasBlockControls.useHasAnyBlockControls)();
  if (!isToolbarEnabled || blockEditingMode !== 'default' && !hasAnyBlockControls) {
    return null;
  }

  // Shifts the toolbar to make room for the parent block selector.
  const classes = (0, _classnames.default)('block-editor-block-contextual-toolbar', {
    'has-parent': hasParents && showParentSelector,
    'is-fixed': isFixed,
    'is-collapsed': isCollapsed
  });
  return (0, _element.createElement)(_navigableToolbar.default, {
    focusOnMount: focusOnMount,
    className: classes
    /* translators: accessibility text for the block toolbar */,
    "aria-label": (0, _i18n.__)('Block tools'),
    ...props
  }, !isCollapsed && (0, _element.createElement)(_blockToolbar.default, {
    hideDragHandle: isFixed
  }), isFixed && isLargeViewport && blockType && (0, _element.createElement)(_components.ToolbarGroup, {
    className: isCollapsed ? 'block-editor-block-toolbar__group-expand-fixed-toolbar' : 'block-editor-block-toolbar__group-collapse-fixed-toolbar'
  }, (0, _element.createElement)(_components.ToolbarItem, {
    as: _components.ToolbarButton,
    ref: toolbarButtonRef,
    icon: isCollapsed ? _icons.next : _icons.previous,
    onClick: () => {
      setIsCollapsed(collapsed => !collapsed);
      toolbarButtonRef.current.focus();
    },
    label: isCollapsed ? (0, _i18n.__)('Show block tools') : (0, _i18n.__)('Hide block tools')
  })));
}
var _default = BlockContextualToolbar;
exports.default = _default;
//# sourceMappingURL=block-contextual-toolbar.js.map