{"version":3,"names":["_element","require","_components","_i18n","_borderRadiusControl","_interopRequireDefault","_hooks","_utils","useHasBorderPanel","settings","controls","useHasBorderColorControl","useHasBorderRadiusControl","useHasBorderStyleControl","useHasBorderWidthControl","some","Boolean","border","color","radius","style","width","BorderToolsPanel","resetAllFilter","onChange","value","panelId","children","resetAll","updatedValue","createElement","__experimentalToolsPanel","label","__","DEFAULT_CONTROLS","BorderPanel","as","Wrapper","inheritedValue","defaultControls","colors","useColorsPerOrigin","decodeValue","rawValue","getValueFromVariable","encodeColorValue","colorValue","allColors","flatMap","originColors","colorObject","find","slug","decodeColorValue","useCallback","useMemo","hasSplitBorders","borderValue","forEach","side","undefined","setBorder","newBorder","showBorderColor","showBorderStyle","showBorderWidth","showBorderRadius","borderRadiusValues","setBorderRadius","newBorderRadius","hasBorderRadius","borderValues","Object","entries","resetBorder","onBorderChange","updatedBorder","previousValue","showBorderByDefault","__experimentalToolsPanelItem","hasValue","isDefinedBorder","onDeselect","isShownByDefault","__experimentalBorderBoxControl","enableAlpha","enableStyle","popoverOffset","popoverPlacement","__experimentalIsRenderedInSidebar","size","default","values","newValue"],"sources":["@wordpress/block-editor/src/components/global-styles/border-panel.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\t__experimentalBorderBoxControl as BorderBoxControl,\n\t__experimentalHasSplitBorders as hasSplitBorders,\n\t__experimentalIsDefinedBorder as isDefinedBorder,\n\t__experimentalToolsPanel as ToolsPanel,\n\t__experimentalToolsPanelItem as ToolsPanelItem,\n} from '@wordpress/components';\nimport { useCallback, useMemo } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport BorderRadiusControl from '../border-radius-control';\nimport { useColorsPerOrigin } from './hooks';\nimport { getValueFromVariable } from './utils';\n\nexport function useHasBorderPanel( settings ) {\n\tconst controls = [\n\t\tuseHasBorderColorControl( settings ),\n\t\tuseHasBorderRadiusControl( settings ),\n\t\tuseHasBorderStyleControl( settings ),\n\t\tuseHasBorderWidthControl( settings ),\n\t];\n\n\treturn controls.some( Boolean );\n}\n\nfunction useHasBorderColorControl( settings ) {\n\treturn settings?.border?.color;\n}\n\nfunction useHasBorderRadiusControl( settings ) {\n\treturn settings?.border?.radius;\n}\n\nfunction useHasBorderStyleControl( settings ) {\n\treturn settings?.border?.style;\n}\n\nfunction useHasBorderWidthControl( settings ) {\n\treturn settings?.border?.width;\n}\n\nfunction BorderToolsPanel( {\n\tresetAllFilter,\n\tonChange,\n\tvalue,\n\tpanelId,\n\tchildren,\n} ) {\n\tconst resetAll = () => {\n\t\tconst updatedValue = resetAllFilter( value );\n\t\tonChange( updatedValue );\n\t};\n\n\treturn (\n\t\t<ToolsPanel\n\t\t\tlabel={ __( 'Border' ) }\n\t\t\tresetAll={ resetAll }\n\t\t\tpanelId={ panelId }\n\t\t>\n\t\t\t{ children }\n\t\t</ToolsPanel>\n\t);\n}\n\nconst DEFAULT_CONTROLS = {\n\tradius: true,\n\tcolor: true,\n\twidth: true,\n};\n\nexport default function BorderPanel( {\n\tas: Wrapper = BorderToolsPanel,\n\tvalue,\n\tonChange,\n\tinheritedValue = value,\n\tsettings,\n\tpanelId,\n\tdefaultControls = DEFAULT_CONTROLS,\n} ) {\n\tconst colors = useColorsPerOrigin( settings );\n\tconst decodeValue = ( rawValue ) =>\n\t\tgetValueFromVariable( { settings }, '', rawValue );\n\tconst encodeColorValue = ( colorValue ) => {\n\t\tconst allColors = colors.flatMap(\n\t\t\t( { colors: originColors } ) => originColors\n\t\t);\n\t\tconst colorObject = allColors.find(\n\t\t\t( { color } ) => color === colorValue\n\t\t);\n\t\treturn colorObject\n\t\t\t? 'var:preset|color|' + colorObject.slug\n\t\t\t: colorValue;\n\t};\n\tconst decodeColorValue = useCallback(\n\t\t( colorValue ) => {\n\t\t\tconst allColors = colors.flatMap(\n\t\t\t\t( { colors: originColors } ) => originColors\n\t\t\t);\n\t\t\tconst colorObject = allColors.find(\n\t\t\t\t( { slug } ) => colorValue === 'var:preset|color|' + slug\n\t\t\t);\n\t\t\treturn colorObject ? colorObject.color : colorValue;\n\t\t},\n\t\t[ colors ]\n\t);\n\tconst border = useMemo( () => {\n\t\tif ( hasSplitBorders( inheritedValue?.border ) ) {\n\t\t\tconst borderValue = { ...inheritedValue?.border };\n\t\t\t[ 'top', 'right', 'bottom', 'left' ].forEach( ( side ) => {\n\t\t\t\tborderValue[ side ] = {\n\t\t\t\t\t...borderValue[ side ],\n\t\t\t\t\tcolor: decodeColorValue( borderValue[ side ]?.color ),\n\t\t\t\t};\n\t\t\t} );\n\t\t\treturn borderValue;\n\t\t}\n\t\treturn {\n\t\t\t...inheritedValue?.border,\n\t\t\tcolor: inheritedValue?.border?.color\n\t\t\t\t? decodeColorValue( inheritedValue?.border?.color )\n\t\t\t\t: undefined,\n\t\t};\n\t}, [ inheritedValue?.border, decodeColorValue ] );\n\tconst setBorder = ( newBorder ) =>\n\t\tonChange( { ...value, border: newBorder } );\n\tconst showBorderColor = useHasBorderColorControl( settings );\n\tconst showBorderStyle = useHasBorderStyleControl( settings );\n\tconst showBorderWidth = useHasBorderWidthControl( settings );\n\n\t// Border radius.\n\tconst showBorderRadius = useHasBorderRadiusControl( settings );\n\tconst borderRadiusValues = decodeValue( border?.radius );\n\tconst setBorderRadius = ( newBorderRadius ) =>\n\t\tsetBorder( { ...border, radius: newBorderRadius } );\n\tconst hasBorderRadius = () => {\n\t\tconst borderValues = value?.border?.radius;\n\t\tif ( typeof borderValues === 'object' ) {\n\t\t\treturn Object.entries( borderValues ).some( Boolean );\n\t\t}\n\t\treturn !! borderValues;\n\t};\n\n\tconst resetBorder = () => {\n\t\tif ( hasBorderRadius() ) {\n\t\t\treturn setBorder( { radius: value?.border?.radius } );\n\t\t}\n\n\t\tsetBorder( undefined );\n\t};\n\n\tconst onBorderChange = ( newBorder ) => {\n\t\t// Ensure we have a visible border style when a border width or\n\t\t// color is being selected.\n\t\tconst updatedBorder = { ...newBorder };\n\n\t\tif ( hasSplitBorders( updatedBorder ) ) {\n\t\t\t[ 'top', 'right', 'bottom', 'left' ].forEach( ( side ) => {\n\t\t\t\tif ( updatedBorder[ side ] ) {\n\t\t\t\t\tupdatedBorder[ side ] = {\n\t\t\t\t\t\t...updatedBorder[ side ],\n\t\t\t\t\t\tcolor: encodeColorValue( updatedBorder[ side ]?.color ),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} );\n\t\t} else if ( updatedBorder ) {\n\t\t\tupdatedBorder.color = encodeColorValue( updatedBorder.color );\n\t\t}\n\n\t\t// As radius is maintained separately to color, style, and width\n\t\t// maintain its value. Undefined values here will be cleaned when\n\t\t// global styles are saved.\n\t\tsetBorder( { radius: border?.radius, ...updatedBorder } );\n\t};\n\n\tconst resetAllFilter = useCallback( ( previousValue ) => {\n\t\treturn {\n\t\t\t...previousValue,\n\t\t\tborder: undefined,\n\t\t};\n\t}, [] );\n\n\tconst showBorderByDefault =\n\t\tdefaultControls?.color || defaultControls?.width;\n\n\treturn (\n\t\t<Wrapper\n\t\t\tresetAllFilter={ resetAllFilter }\n\t\t\tvalue={ value }\n\t\t\tonChange={ onChange }\n\t\t\tpanelId={ panelId }\n\t\t>\n\t\t\t{ ( showBorderWidth || showBorderColor ) && (\n\t\t\t\t<ToolsPanelItem\n\t\t\t\t\thasValue={ () => isDefinedBorder( value?.border ) }\n\t\t\t\t\tlabel={ __( 'Border' ) }\n\t\t\t\t\tonDeselect={ () => resetBorder() }\n\t\t\t\t\tisShownByDefault={ showBorderByDefault }\n\t\t\t\t\tpanelId={ panelId }\n\t\t\t\t>\n\t\t\t\t\t<BorderBoxControl\n\t\t\t\t\t\tcolors={ colors }\n\t\t\t\t\t\tenableAlpha={ true }\n\t\t\t\t\t\tenableStyle={ showBorderStyle }\n\t\t\t\t\t\tonChange={ onBorderChange }\n\t\t\t\t\t\tpopoverOffset={ 40 }\n\t\t\t\t\t\tpopoverPlacement=\"left-start\"\n\t\t\t\t\t\tvalue={ border }\n\t\t\t\t\t\t__experimentalIsRenderedInSidebar={ true }\n\t\t\t\t\t\tsize={ '__unstable-large' }\n\t\t\t\t\t/>\n\t\t\t\t</ToolsPanelItem>\n\t\t\t) }\n\t\t\t{ showBorderRadius && (\n\t\t\t\t<ToolsPanelItem\n\t\t\t\t\thasValue={ hasBorderRadius }\n\t\t\t\t\tlabel={ __( 'Radius' ) }\n\t\t\t\t\tonDeselect={ () => setBorderRadius( undefined ) }\n\t\t\t\t\tisShownByDefault={ defaultControls.radius }\n\t\t\t\t\tpanelId={ panelId }\n\t\t\t\t>\n\t\t\t\t\t<BorderRadiusControl\n\t\t\t\t\t\tvalues={ borderRadiusValues }\n\t\t\t\t\t\tonChange={ ( newValue ) => {\n\t\t\t\t\t\t\tsetBorderRadius( newValue || undefined );\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</ToolsPanelItem>\n\t\t\t) }\n\t\t</Wrapper>\n\t);\n}\n"],"mappings":"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"}