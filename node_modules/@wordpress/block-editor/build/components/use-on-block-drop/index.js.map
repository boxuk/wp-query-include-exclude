{"version":3,"names":["_element","require","_blocks","_data","_dom","_store","parseDropEvent","event","result","srcRootClientId","srcClientIds","srcIndex","type","blocks","dataTransfer","Object","assign","JSON","parse","getData","err","onBlockDrop","targetRootClientId","targetBlockIndex","getBlockIndex","getClientIdsOfDescendants","moveBlocks","insertOrReplaceBlocks","clearSelectedBlock","sourceRootClientId","sourceClientIds","dropType","blocksToInsert","map","block","cloneBlock","sourceBlockIndex","includes","some","id","isAtSameLevel","draggedBlockCount","length","insertIndex","onFilesDrop","hasUploadPermissions","updateBlockAttributes","canInsertBlockType","files","transformation","findTransform","getBlockTransforms","transform","blockName","isMatch","onHTMLDrop","HTML","pasteHandler","mode","useOnBlockDrop","options","operation","useSelect","select","blockEditorStore","getSettings","mediaUpload","getBlockOrder","getBlocksByClientId","insertBlocks","moveBlocksToPosition","replaceBlocks","removeBlocks","useDispatch","registry","useRegistry","useCallback","updateSelection","initialPosition","clientIds","clientId","undefined","sourceBlocks","targetBlockClientIds","targetBlockClientId","batch","_onDrop","_onFilesDrop","_onHTMLDrop","getFilesFromDataTransfer","html"],"sources":["@wordpress/block-editor/src/components/use-on-block-drop/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport {\n\tcloneBlock,\n\tfindTransform,\n\tgetBlockTransforms,\n\tpasteHandler,\n} from '@wordpress/blocks';\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\nimport { getFilesFromDataTransfer } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('@wordpress/element').WPSyntheticEvent} WPSyntheticEvent */\n/** @typedef {import('./types').WPDropOperation} WPDropOperation */\n\n/**\n * Retrieve the data for a block drop event.\n *\n * @param {WPSyntheticEvent} event The drop event.\n *\n * @return {Object} An object with block drag and drop data.\n */\nexport function parseDropEvent( event ) {\n\tlet result = {\n\t\tsrcRootClientId: null,\n\t\tsrcClientIds: null,\n\t\tsrcIndex: null,\n\t\ttype: null,\n\t\tblocks: null,\n\t};\n\n\tif ( ! event.dataTransfer ) {\n\t\treturn result;\n\t}\n\n\ttry {\n\t\tresult = Object.assign(\n\t\t\tresult,\n\t\t\tJSON.parse( event.dataTransfer.getData( 'wp-blocks' ) )\n\t\t);\n\t} catch ( err ) {\n\t\treturn result;\n\t}\n\n\treturn result;\n}\n\n/**\n * A function that returns an event handler function for block drop events.\n *\n * @param {string}   targetRootClientId        The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex          The index where the block(s) will be inserted.\n * @param {Function} getBlockIndex             A function that gets the index of a block.\n * @param {Function} getClientIdsOfDescendants A function that gets the client ids of descendant blocks.\n * @param {Function} moveBlocks                A function that moves blocks.\n * @param {Function} insertOrReplaceBlocks     A function that inserts or replaces blocks.\n * @param {Function} clearSelectedBlock        A function that clears block selection.\n * @return {Function} The event handler for a block drop event.\n */\nexport function onBlockDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\tgetBlockIndex,\n\tgetClientIdsOfDescendants,\n\tmoveBlocks,\n\tinsertOrReplaceBlocks,\n\tclearSelectedBlock\n) {\n\treturn ( event ) => {\n\t\tconst {\n\t\t\tsrcRootClientId: sourceRootClientId,\n\t\t\tsrcClientIds: sourceClientIds,\n\t\t\ttype: dropType,\n\t\t\tblocks,\n\t\t} = parseDropEvent( event );\n\n\t\t// If the user is inserting a block.\n\t\tif ( dropType === 'inserter' ) {\n\t\t\tclearSelectedBlock();\n\t\t\tconst blocksToInsert = blocks.map( ( block ) =>\n\t\t\t\tcloneBlock( block )\n\t\t\t);\n\t\t\tinsertOrReplaceBlocks( blocksToInsert, true, null );\n\t\t}\n\n\t\t// If the user is moving a block.\n\t\tif ( dropType === 'block' ) {\n\t\t\tconst sourceBlockIndex = getBlockIndex( sourceClientIds[ 0 ] );\n\n\t\t\t// If the user is dropping to the same position, return early.\n\t\t\tif (\n\t\t\t\tsourceRootClientId === targetRootClientId &&\n\t\t\t\tsourceBlockIndex === targetBlockIndex\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the user is attempting to drop a block within its own\n\t\t\t// nested blocks, return early as this would create infinite\n\t\t\t// recursion.\n\t\t\tif (\n\t\t\t\tsourceClientIds.includes( targetRootClientId ) ||\n\t\t\t\tgetClientIdsOfDescendants( sourceClientIds ).some(\n\t\t\t\t\t( id ) => id === targetRootClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isAtSameLevel = sourceRootClientId === targetRootClientId;\n\t\t\tconst draggedBlockCount = sourceClientIds.length;\n\n\t\t\t// If the block is kept at the same level and moved downwards,\n\t\t\t// subtract to take into account that the blocks being dragged\n\t\t\t// were removed from the block list above the insertion point.\n\t\t\tconst insertIndex =\n\t\t\t\tisAtSameLevel && sourceBlockIndex < targetBlockIndex\n\t\t\t\t\t? targetBlockIndex - draggedBlockCount\n\t\t\t\t\t: targetBlockIndex;\n\n\t\t\tmoveBlocks( sourceClientIds, sourceRootClientId, insertIndex );\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related file drop events.\n *\n * @param {string}   targetRootClientId    The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex      The index where the block(s) will be inserted.\n * @param {boolean}  hasUploadPermissions  Whether the user has upload permissions.\n * @param {Function} updateBlockAttributes A function that updates a block's attributes.\n * @param {Function} canInsertBlockType    A function that returns checks whether a block type can be inserted.\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\n *\n * @return {Function} The event handler for a block-related file drop event.\n */\nexport function onFilesDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\thasUploadPermissions,\n\tupdateBlockAttributes,\n\tcanInsertBlockType,\n\tinsertOrReplaceBlocks\n) {\n\treturn ( files ) => {\n\t\tif ( ! hasUploadPermissions ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst transformation = findTransform(\n\t\t\tgetBlockTransforms( 'from' ),\n\t\t\t( transform ) =>\n\t\t\t\ttransform.type === 'files' &&\n\t\t\t\tcanInsertBlockType( transform.blockName, targetRootClientId ) &&\n\t\t\t\ttransform.isMatch( files )\n\t\t);\n\n\t\tif ( transformation ) {\n\t\t\tconst blocks = transformation.transform(\n\t\t\t\tfiles,\n\t\t\t\tupdateBlockAttributes\n\t\t\t);\n\t\t\tinsertOrReplaceBlocks( blocks );\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related HTML drop events.\n *\n * @param {string}   targetRootClientId    The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex      The index where the block(s) will be inserted.\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\n *\n * @return {Function} The event handler for a block-related HTML drop event.\n */\nexport function onHTMLDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\tinsertOrReplaceBlocks\n) {\n\treturn ( HTML ) => {\n\t\tconst blocks = pasteHandler( { HTML, mode: 'BLOCKS' } );\n\n\t\tif ( blocks.length ) {\n\t\t\tinsertOrReplaceBlocks( blocks );\n\t\t}\n\t};\n}\n\n/**\n * A React hook for handling block drop events.\n *\n * @param {string}          targetRootClientId  The root client id where the block(s) will be inserted.\n * @param {number}          targetBlockIndex    The index where the block(s) will be inserted.\n * @param {Object}          options             The optional options.\n * @param {WPDropOperation} [options.operation] The type of operation to perform on drop. Could be `insert` or `replace` for now.\n *\n * @return {Function} A function to be passed to the onDrop handler.\n */\nexport default function useOnBlockDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\toptions = {}\n) {\n\tconst { operation = 'insert' } = options;\n\tconst hasUploadPermissions = useSelect(\n\t\t( select ) => select( blockEditorStore ).getSettings().mediaUpload,\n\t\t[]\n\t);\n\tconst {\n\t\tcanInsertBlockType,\n\t\tgetBlockIndex,\n\t\tgetClientIdsOfDescendants,\n\t\tgetBlockOrder,\n\t\tgetBlocksByClientId,\n\t} = useSelect( blockEditorStore );\n\tconst {\n\t\tinsertBlocks,\n\t\tmoveBlocksToPosition,\n\t\tupdateBlockAttributes,\n\t\tclearSelectedBlock,\n\t\treplaceBlocks,\n\t\tremoveBlocks,\n\t} = useDispatch( blockEditorStore );\n\tconst registry = useRegistry();\n\n\tconst insertOrReplaceBlocks = useCallback(\n\t\t( blocks, updateSelection = true, initialPosition = 0 ) => {\n\t\t\tif ( operation === 'replace' ) {\n\t\t\t\tconst clientIds = getBlockOrder( targetRootClientId );\n\t\t\t\tconst clientId = clientIds[ targetBlockIndex ];\n\n\t\t\t\treplaceBlocks( clientId, blocks, undefined, initialPosition );\n\t\t\t} else {\n\t\t\t\tinsertBlocks(\n\t\t\t\t\tblocks,\n\t\t\t\t\ttargetBlockIndex,\n\t\t\t\t\ttargetRootClientId,\n\t\t\t\t\tupdateSelection,\n\t\t\t\t\tinitialPosition\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\toperation,\n\t\t\tgetBlockOrder,\n\t\t\tinsertBlocks,\n\t\t\treplaceBlocks,\n\t\t\ttargetBlockIndex,\n\t\t\ttargetRootClientId,\n\t\t]\n\t);\n\n\tconst moveBlocks = useCallback(\n\t\t( sourceClientIds, sourceRootClientId, insertIndex ) => {\n\t\t\tif ( operation === 'replace' ) {\n\t\t\t\tconst sourceBlocks = getBlocksByClientId( sourceClientIds );\n\t\t\t\tconst targetBlockClientIds =\n\t\t\t\t\tgetBlockOrder( targetRootClientId );\n\t\t\t\tconst targetBlockClientId =\n\t\t\t\t\ttargetBlockClientIds[ targetBlockIndex ];\n\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\t// Remove the source blocks.\n\t\t\t\t\tremoveBlocks( sourceClientIds, false );\n\t\t\t\t\t// Replace the target block with the source blocks.\n\t\t\t\t\treplaceBlocks(\n\t\t\t\t\t\ttargetBlockClientId,\n\t\t\t\t\t\tsourceBlocks,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tmoveBlocksToPosition(\n\t\t\t\t\tsourceClientIds,\n\t\t\t\t\tsourceRootClientId,\n\t\t\t\t\ttargetRootClientId,\n\t\t\t\t\tinsertIndex\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\toperation,\n\t\t\tgetBlockOrder,\n\t\t\tgetBlocksByClientId,\n\t\t\tinsertBlocks,\n\t\t\tmoveBlocksToPosition,\n\t\t\tremoveBlocks,\n\t\t\ttargetBlockIndex,\n\t\t\ttargetRootClientId,\n\t\t]\n\t);\n\n\tconst _onDrop = onBlockDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex,\n\t\tgetBlockIndex,\n\t\tgetClientIdsOfDescendants,\n\t\tmoveBlocks,\n\t\tinsertOrReplaceBlocks,\n\t\tclearSelectedBlock\n\t);\n\tconst _onFilesDrop = onFilesDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex,\n\t\thasUploadPermissions,\n\t\tupdateBlockAttributes,\n\t\tcanInsertBlockType,\n\t\tinsertOrReplaceBlocks\n\t);\n\tconst _onHTMLDrop = onHTMLDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex,\n\t\tinsertOrReplaceBlocks\n\t);\n\n\treturn ( event ) => {\n\t\tconst files = getFilesFromDataTransfer( event.dataTransfer );\n\t\tconst html = event.dataTransfer.getData( 'text/html' );\n\n\t\t/**\n\t\t * From Windows Chrome 96, the `event.dataTransfer` returns both file object and HTML.\n\t\t * The order of the checks is important to recognise the HTML drop.\n\t\t */\n\t\tif ( html ) {\n\t\t\t_onHTMLDrop( html );\n\t\t} else if ( files.length ) {\n\t\t\t_onFilesDrop( files );\n\t\t} else {\n\t\t\t_onDrop( event );\n\t\t}\n\t};\n}\n"],"mappings":"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"}