"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockPatternsCategoryDialog = BlockPatternsCategoryDialog;
exports.BlockPatternsCategoryPanel = BlockPatternsCategoryPanel;
exports.default = exports.allPatternsCategory = void 0;
exports.isPatternFiltered = isPatternFiltered;
exports.myPatternsCategory = void 0;
exports.usePatternsCategories = usePatternsCategories;
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _dom = require("@wordpress/dom");
var _a11y = require("@wordpress/a11y");
var _usePatternsState = _interopRequireDefault(require("./hooks/use-patterns-state"));
var _blockPatternsList = _interopRequireDefault(require("../block-patterns-list"));
var _explorer = _interopRequireDefault(require("./block-patterns-explorer/explorer"));
var _mobileTabNavigation = _interopRequireDefault(require("./mobile-tab-navigation"));
var _usePatternsPaging = _interopRequireDefault(require("./hooks/use-patterns-paging"));
var _blockPatternsFilter = require("./block-patterns-filter");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const noop = () => {};
const allPatternsCategory = {
  name: 'allPatterns',
  label: (0, _i18n.__)('All patterns')
};
exports.allPatternsCategory = allPatternsCategory;
const myPatternsCategory = {
  name: 'myPatterns',
  label: (0, _i18n.__)('My patterns')
};
exports.myPatternsCategory = myPatternsCategory;
function isPatternFiltered(pattern, sourceFilter, syncFilter) {
  const isUserPattern = pattern.name.startsWith('core/block');
  const isDirectoryPattern = pattern.source === 'core' || pattern.source?.startsWith('pattern-directory');

  // If theme source selected, filter out user created patterns and those from
  // the core patterns directory.
  if (sourceFilter === _blockPatternsFilter.PATTERN_TYPES.theme && (isUserPattern || isDirectoryPattern)) {
    return true;
  }

  // If the directory source is selected, filter out user created patterns
  // and those bundled with the theme.
  if (sourceFilter === _blockPatternsFilter.PATTERN_TYPES.directory && (isUserPattern || !isDirectoryPattern)) {
    return true;
  }

  // If user source selected, filter out theme patterns. Any pattern without
  // an id wasn't created by a user.
  if (sourceFilter === _blockPatternsFilter.PATTERN_TYPES.user && !pattern.id) {
    return true;
  }

  // Filter by sync status.
  if (syncFilter === _blockPatternsFilter.SYNC_TYPES.full && pattern.syncStatus !== '') {
    return true;
  }
  if (syncFilter === _blockPatternsFilter.SYNC_TYPES.unsynced && pattern.syncStatus !== 'unsynced' && isUserPattern) {
    return true;
  }
  return false;
}
function usePatternsCategories(rootClientId, sourceFilter = 'all') {
  const [patterns, allCategories] = (0, _usePatternsState.default)(undefined, rootClientId);
  const filteredPatterns = (0, _element.useMemo)(() => sourceFilter === 'all' ? patterns : patterns.filter(pattern => !isPatternFiltered(pattern, sourceFilter)), [sourceFilter, patterns]);
  const hasRegisteredCategory = (0, _element.useCallback)(pattern => {
    if (!pattern.categories || !pattern.categories.length) {
      return false;
    }
    return pattern.categories.some(cat => allCategories.some(category => category.name === cat));
  }, [allCategories]);

  // Remove any empty categories.
  const populatedCategories = (0, _element.useMemo)(() => {
    const categories = allCategories.filter(category => filteredPatterns.some(pattern => pattern.categories?.includes(category.name))).sort((a, b) => a.label.localeCompare(b.label));
    if (filteredPatterns.some(pattern => !hasRegisteredCategory(pattern)) && !categories.find(category => category.name === 'uncategorized')) {
      categories.push({
        name: 'uncategorized',
        label: (0, _i18n._x)('Uncategorized')
      });
    }
    if (filteredPatterns.some(pattern => pattern.id)) {
      categories.unshift(myPatternsCategory);
    }
    if (filteredPatterns.length > 0) {
      categories.unshift({
        name: allPatternsCategory.name,
        label: allPatternsCategory.label
      });
    }
    (0, _a11y.speak)((0, _i18n.sprintf)( /* translators: %d: number of categories . */
    (0, _i18n._n)('%d category button displayed.', '%d category buttons displayed.', categories.length), categories.length));
    return categories;
  }, [allCategories, filteredPatterns, hasRegisteredCategory]);
  return populatedCategories;
}
function BlockPatternsCategoryDialog({
  rootClientId,
  onInsert,
  onHover,
  category,
  showTitlesAsTooltip,
  patternFilter
}) {
  const container = (0, _element.useRef)();
  (0, _element.useEffect)(() => {
    const timeout = setTimeout(() => {
      const [firstTabbable] = _dom.focus.tabbable.find(container.current);
      firstTabbable?.focus();
    });
    return () => clearTimeout(timeout);
  }, [category]);
  return (0, _element.createElement)("div", {
    ref: container,
    className: "block-editor-inserter__patterns-category-dialog"
  }, (0, _element.createElement)(BlockPatternsCategoryPanel, {
    key: category.name,
    rootClientId: rootClientId,
    onInsert: onInsert,
    onHover: onHover,
    category: category,
    showTitlesAsTooltip: showTitlesAsTooltip,
    patternFilter: patternFilter
  }));
}
function BlockPatternsCategoryPanel({
  rootClientId,
  onInsert,
  onHover = noop,
  category,
  showTitlesAsTooltip
}) {
  const [allPatterns,, onClickPattern] = (0, _usePatternsState.default)(onInsert, rootClientId);
  const [patternSyncFilter, setPatternSyncFilter] = (0, _element.useState)('all');
  const [patternSourceFilter, setPatternSourceFilter] = (0, _element.useState)('all');
  const availableCategories = usePatternsCategories(rootClientId, patternSourceFilter);
  const scrollContainerRef = (0, _element.useRef)();
  const currentCategoryPatterns = (0, _element.useMemo)(() => allPatterns.filter(pattern => {
    var _pattern$categories$f;
    if (isPatternFiltered(pattern, patternSourceFilter, patternSyncFilter)) {
      return false;
    }
    if (category.name === allPatternsCategory.name) {
      return true;
    }
    if (category.name === myPatternsCategory.name && pattern.id) {
      return true;
    }
    if (category.name !== 'uncategorized') {
      return pattern.categories?.includes(category.name);
    }

    // The uncategorized category should show all the patterns without any category
    // or with no available category.
    const availablePatternCategories = (_pattern$categories$f = pattern.categories?.filter(cat => availableCategories.find(availableCategory => availableCategory.name === cat))) !== null && _pattern$categories$f !== void 0 ? _pattern$categories$f : [];
    return availablePatternCategories.length === 0;
  }), [allPatterns, availableCategories, category.name, patternSourceFilter, patternSyncFilter]);
  const pagingProps = (0, _usePatternsPaging.default)(currentCategoryPatterns, category, scrollContainerRef);
  const {
    changePage
  } = pagingProps;

  // Hide block pattern preview on unmount.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  (0, _element.useEffect)(() => () => onHover(null), []);
  const onSetPatternSyncFilter = (0, _element.useCallback)(value => {
    setPatternSyncFilter(value);
    changePage(1);
  }, [setPatternSyncFilter, changePage]);
  const onSetPatternSourceFilter = (0, _element.useCallback)(value => {
    setPatternSourceFilter(value);
    changePage(1);
  }, [setPatternSourceFilter, changePage]);
  return (0, _element.createElement)("div", {
    className: "block-editor-inserter__patterns-category-panel"
  }, (0, _element.createElement)(_components.__experimentalVStack, {
    spacing: 2,
    className: "block-editor-inserter__patterns-category-panel-header"
  }, (0, _element.createElement)(_components.__experimentalHStack, null, (0, _element.createElement)(_components.FlexBlock, null, (0, _element.createElement)(_components.__experimentalHeading, {
    level: 4,
    as: "div"
  }, category.label)), (0, _element.createElement)(_blockPatternsFilter.BlockPatternsSyncFilter, {
    patternSyncFilter: patternSyncFilter,
    patternSourceFilter: patternSourceFilter,
    setPatternSyncFilter: onSetPatternSyncFilter,
    setPatternSourceFilter: onSetPatternSourceFilter,
    scrollContainerRef: scrollContainerRef,
    category: category
  })), !currentCategoryPatterns.length && (0, _element.createElement)(_components.__experimentalText, {
    variant: "muted",
    className: "block-editor-inserter__patterns-category-no-results"
  }, (0, _i18n.__)('No results found'))), currentCategoryPatterns.length > 0 && (0, _element.createElement)(_blockPatternsList.default, {
    ref: scrollContainerRef,
    shownPatterns: pagingProps.categoryPatternsAsyncList,
    blockPatterns: pagingProps.categoryPatterns,
    onClickPattern: onClickPattern,
    onHover: onHover,
    label: category.label,
    orientation: "vertical",
    category: category.name,
    isDraggable: true,
    showTitlesAsTooltip: showTitlesAsTooltip,
    patternFilter: patternSourceFilter,
    pagingProps: pagingProps
  }));
}
function BlockPatternsTabs({
  onSelectCategory,
  selectedCategory,
  onInsert,
  rootClientId
}) {
  const [showPatternsExplorer, setShowPatternsExplorer] = (0, _element.useState)(false);
  const categories = usePatternsCategories(rootClientId);
  const initialCategory = selectedCategory || categories[0];
  const isMobile = (0, _compose.useViewportMatch)('medium', '<');
  return (0, _element.createElement)(_element.Fragment, null, !isMobile && (0, _element.createElement)("div", {
    className: "block-editor-inserter__block-patterns-tabs-container"
  }, (0, _element.createElement)("nav", {
    "aria-label": (0, _i18n.__)('Block pattern categories'),
    className: "block-editor-inserter__block-patterns-tabs"
  }, (0, _element.createElement)(_components.__experimentalItemGroup, {
    role: "list"
  }, categories.map(category => (0, _element.createElement)(_components.__experimentalItem, {
    role: "listitem",
    key: category.name,
    onClick: () => onSelectCategory(category),
    className: category === selectedCategory ? 'block-editor-inserter__patterns-category block-editor-inserter__patterns-selected-category' : 'block-editor-inserter__patterns-category',
    "aria-label": category.label,
    "aria-current": category === selectedCategory ? 'true' : undefined
  }, (0, _element.createElement)(_components.__experimentalHStack, null, (0, _element.createElement)(_components.FlexBlock, null, category.label), (0, _element.createElement)(_icons.Icon, {
    icon: (0, _i18n.isRTL)() ? _icons.chevronLeft : _icons.chevronRight
  })))), (0, _element.createElement)("div", {
    role: "listitem"
  }, (0, _element.createElement)(_components.Button, {
    className: "block-editor-inserter__patterns-explore-button",
    onClick: () => setShowPatternsExplorer(true),
    variant: "secondary"
  }, (0, _i18n.__)('Explore all patterns')))))), isMobile && (0, _element.createElement)(_mobileTabNavigation.default, {
    categories: categories
  }, category => (0, _element.createElement)(BlockPatternsCategoryPanel, {
    key: category.name,
    onInsert: onInsert,
    rootClientId: rootClientId,
    category: category,
    showTitlesAsTooltip: false
  })), showPatternsExplorer && (0, _element.createElement)(_explorer.default, {
    initialCategory: initialCategory,
    patternCategories: categories,
    onModalClose: () => setShowPatternsExplorer(false),
    rootClientId: rootClientId
  }));
}
var _default = BlockPatternsTabs;
exports.default = _default;
//# sourceMappingURL=block-patterns-tab.js.map