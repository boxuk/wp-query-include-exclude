export const DEFAULT_ENTITY_KEY: "id";
export const rootEntitiesConfig: ({
    label: string;
    kind: string;
    name: string;
    baseURL: string;
    baseURLParams: {
        _fields: string;
        context?: undefined;
    };
    syncConfig: {
        fetch: () => Promise<any>;
        applyChangesToDoc: (doc: any, changes: any) => void;
        fromCRDTDoc: (doc: any) => any;
    };
    syncObjectType: string;
    getSyncObjectId: () => string;
    getTitle?: undefined;
    key?: undefined;
    plural?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    label: string;
    name: string;
    kind: string;
    baseURL: string;
    getTitle: (record: any) => any;
    syncConfig: {
        fetch: () => Promise<any>;
        applyChangesToDoc: (doc: any, changes: any) => void;
        fromCRDTDoc: (doc: any) => any;
    };
    syncObjectType: string;
    getSyncObjectId: () => string;
    baseURLParams?: undefined;
    key?: undefined;
    plural?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    label: string;
    name: string;
    kind: string;
    key: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    syncConfig: {
        fetch: (id: any) => Promise<any>;
        applyChangesToDoc: (doc: any, changes: any) => void;
        fromCRDTDoc: (doc: any) => any;
    };
    syncObjectType: string;
    getSyncObjectId: (id: any) => any;
    getTitle?: undefined;
    plural?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    name: string;
    kind: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    plural: string;
    label: string;
    rawAttributes: string[];
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    getTitle?: undefined;
    key?: undefined;
    transientEdits?: undefined;
} | {
    name: string;
    kind: string;
    key: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    plural: string;
    label: string;
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    getTitle?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    name: string;
    kind: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    plural: string;
    transientEdits: {
        blocks: boolean;
    };
    label: string;
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    getTitle?: undefined;
    key?: undefined;
    rawAttributes?: undefined;
} | {
    name: string;
    kind: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    plural: string;
    label: string;
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    getTitle?: undefined;
    key?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    label: string;
    name: string;
    kind: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    plural: string;
    getTitle: (record: any) => any;
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    key?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
} | {
    label: string;
    name: string;
    kind: string;
    baseURL: string;
    baseURLParams: {
        context: string;
        _fields?: undefined;
    };
    key: string;
    syncConfig?: undefined;
    syncObjectType?: undefined;
    getSyncObjectId?: undefined;
    getTitle?: undefined;
    plural?: undefined;
    rawAttributes?: undefined;
    transientEdits?: undefined;
})[];
export const additionalEntityConfigLoaders: {
    kind: string;
    loadEntities: typeof loadPostTypeEntities;
}[];
export function prePersistPostType(persistedRecord: any, edits: any): any;
export function getMethodName(kind: string, name: string, prefix?: string, usePlural?: boolean): string;
export function getOrLoadEntitiesConfig(kind: string): (thunkArgs: object) => Promise<any[]>;
/**
 * Returns the list of post type entities.
 *
 * @return {Promise} Entities promise
 */
declare function loadPostTypeEntities(): Promise<any>;
export {};
//# sourceMappingURL=entities.d.ts.map