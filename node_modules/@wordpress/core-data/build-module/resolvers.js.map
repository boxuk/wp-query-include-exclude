{"version":3,"names":["camelCase","addQueryArgs","apiFetch","STORE_NAME","getOrLoadEntitiesConfig","DEFAULT_ENTITY_KEY","forwardResolver","getNormalizedCommaSeparable","getSyncProvider","getAuthors","query","dispatch","path","users","receiveUserQuery","getCurrentUser","currentUser","receiveCurrentUser","getEntityRecord","kind","name","key","select","configs","entityConfig","find","config","__experimentalNoFetch","lock","__unstableAcquireStoreLock","exclusive","window","__experimentalEnableSync","syncConfig","process","env","IS_GUTENBERG_PLUGIN","objectId","getSyncObjectId","bootstrap","syncObjectType","record","receiveEntityRecords","type","recordId","edits","meta","undo","undefined","_fields","Set","join","baseURL","baseURLParams","include","hasRecords","hasEntityRecords","__unstableReleaseStoreLock","getRawEntityRecord","getEditedEntityRecord","getEntityRecords","records","Object","values","map","split","forEach","field","hasOwnProperty","context","resolutionsArgs","filter","selectorName","args","shouldInvalidate","action","invalidateCache","getCurrentTheme","resolveSelect","activeThemes","status","receiveCurrentTheme","getThemeSupports","getEmbedPreview","url","embedProxyResponse","receiveEmbedPreview","error","canUser","requestedAction","resource","id","registry","hasStartedResolution","resourcePath","retrievedActions","includes","Error","relatedAction","isAlreadyResolving","response","method","parse","allowHeader","headers","get","allowedMethods","allow","permissions","methods","create","read","update","delete","actionName","methodName","entries","receiveUserPermission","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","rest_base","restBase","rest_namespace","restNamespace","getPostType","autosaves","length","receiveAutosaves","getAutosave","__experimentalGetTemplateForLink","link","template","then","data","e","__experimentalGetCurrentGlobalStylesId","globalStylesURL","_links","href","globalStylesObject","__experimentalReceiveCurrentGlobalStylesId","__experimentalGetCurrentThemeBaseGlobalStyles","currentTheme","themeGlobalStyles","stylesheet","__experimentalReceiveThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","variations","__experimentalReceiveThemeGlobalStyleVariations","getCurrentThemeGlobalStylesRevisions","globalStylesId","revisionsURL","resetRevisions","revisions","revision","fromEntries","value","receiveThemeGlobalStyleRevisions","getBlockPatterns","restPatterns","patterns","pattern","getBlockPatternCategories","categories","getUserPatternCategories","patternCategories","per_page","mappedPatternCategories","userCategory","label","slug","getNavigationFallbackId","fallback","_embed","_embedded","self","receiveNavigationFallbackId","existingFallbackEntityRecord","invalidateNavigationQueries","finishResolution"],"sources":["@wordpress/core-data/src/resolvers.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { camelCase } from 'change-case';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { forwardResolver, getNormalizedCommaSeparable } from './utils';\nimport { getSyncProvider } from './sync';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getAuthors =\n\t( query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst path = addQueryArgs(\n\t\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\t\tquery\n\t\t);\n\t\tconst users = await apiFetch( { path } );\n\t\tdispatch.receiveUserQuery( path, users );\n\t};\n\n/**\n * Requests the current user from the REST API.\n */\nexport const getCurrentUser =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\n\t\tdispatch.receiveCurrentUser( currentUser );\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request. If requesting specific\n *                                 fields, fields must always include the ID.\n */\nexport const getEntityRecord =\n\t( kind, name, key = '', query ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, key ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\t// Entity supports configs,\n\t\t\t// use the sync algorithm instead of the old fetch behavior.\n\t\t\tif (\n\t\t\t\twindow.__experimentalEnableSync &&\n\t\t\t\tentityConfig.syncConfig &&\n\t\t\t\t! query\n\t\t\t) {\n\t\t\t\tif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\t\t\t\t\tconst objectId = entityConfig.getSyncObjectId( key );\n\n\t\t\t\t\t// Loads the persisted document.\n\t\t\t\t\tawait getSyncProvider().bootstrap(\n\t\t\t\t\t\tentityConfig.syncObjectType,\n\t\t\t\t\t\tobjectId,\n\t\t\t\t\t\t( record ) => {\n\t\t\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\tquery\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// Boostraps the edited document as well (and load from peers).\n\t\t\t\t\tawait getSyncProvider().bootstrap(\n\t\t\t\t\t\tentityConfig.syncObjectType + '--edit',\n\t\t\t\t\t\tobjectId,\n\t\t\t\t\t\t( record ) => {\n\t\t\t\t\t\t\tdispatch( {\n\t\t\t\t\t\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\trecordId: key,\n\t\t\t\t\t\t\t\tedits: record,\n\t\t\t\t\t\t\t\tmeta: {\n\t\t\t\t\t\t\t\t\tundo: undefined,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( query !== undefined && query._fields ) {\n\t\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t\t// the ID.\n\t\t\t\t\tquery = {\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t_fields: [\n\t\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t\t...( getNormalizedCommaSeparable(\n\t\t\t\t\t\t\t\t\tquery._fields\n\t\t\t\t\t\t\t\t) || [] ),\n\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t\t] ),\n\t\t\t\t\t\t].join(),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Disable reason: While true that an early return could leave `path`\n\t\t\t\t// unused, it's important that path is derived using the query prior to\n\t\t\t\t// additional query modifications in the condition below, since those\n\t\t\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t\t\t// for how the request is made to the REST API.\n\n\t\t\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\t\t\tconst path = addQueryArgs(\n\t\t\t\t\tentityConfig.baseURL + ( key ? '/' + key : '' ),\n\t\t\t\t\t{\n\t\t\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t\t\t...query,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif ( query !== undefined ) {\n\t\t\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\t\t\tconst hasRecords = select.hasEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tquery\n\t\t\t\t\t);\n\t\t\t\t\tif ( hasRecords ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst record = await apiFetch( { path } );\n\t\t\t\tdispatch.receiveEntityRecords( kind, name, record, query );\n\t\t\t}\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object. If requesting specific fields, fields\n *                        must always include the ID.\n */\nexport const getEntityRecords =\n\t( kind, name, query = {} ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: [\n\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t] ),\n\t\t\t\t\t].join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst path = addQueryArgs( entityConfig.baseURL, {\n\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t...query,\n\t\t\t} );\n\n\t\t\tlet records = Object.values( await apiFetch( { path } ) );\n\t\t\t// If we request fields but the result doesn't contain the fields,\n\t\t\t// explicitly set these fields as \"undefined\"\n\t\t\t// that way we consider the query \"fullfilled\".\n\t\t\tif ( query._fields ) {\n\t\t\t\trecords = records.map( ( record ) => {\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn record;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tdispatch.receiveEntityRecords( kind, name, records, query );\n\n\t\t\t// When requesting all fields, the list of results can be used to\n\t\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\t\t\tconst resolutionsArgs = records\n\t\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t}\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport const getCurrentTheme =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\n\t\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\n\t};\n\n/**\n * Requests theme supports data from the index.\n */\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport const getEmbedPreview =\n\t( url ) =>\n\tasync ( { dispatch } ) => {\n\t\ttry {\n\t\t\tconst embedProxyResponse = await apiFetch( {\n\t\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t\t} );\n\t\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\n\t\t} catch ( error ) {\n\t\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\t\tdispatch.receiveEmbedPreview( url, false );\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  requestedAction Action to check. One of: 'create', 'read', 'update',\n *                                  'delete'.\n * @param {string}  resource        REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id              ID of the rest resource to check.\n */\nexport const canUser =\n\t( requestedAction, resource, id ) =>\n\tasync ( { dispatch, registry } ) => {\n\t\tconst { hasStartedResolution } = registry.select( STORE_NAME );\n\n\t\tconst resourcePath = id ? `${ resource }/${ id }` : resource;\n\t\tconst retrievedActions = [ 'create', 'read', 'update', 'delete' ];\n\n\t\tif ( ! retrievedActions.includes( requestedAction ) ) {\n\t\t\tthrow new Error( `'${ requestedAction }' is not a valid action.` );\n\t\t}\n\n\t\t// Prevent resolving the same resource twice.\n\t\tfor ( const relatedAction of retrievedActions ) {\n\t\t\tif ( relatedAction === requestedAction ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAlreadyResolving = hasStartedResolution( 'canUser', [\n\t\t\t\trelatedAction,\n\t\t\t\tresource,\n\t\t\t\tid,\n\t\t\t] );\n\t\t\tif ( isAlreadyResolving ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await apiFetch( {\n\t\t\t\tpath: `/wp/v2/${ resourcePath }`,\n\t\t\t\tmethod: 'OPTIONS',\n\t\t\t\tparse: false,\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\t\treturn;\n\t\t}\n\n\t\t// Optional chaining operator is used here because the API requests don't\n\t\t// return the expected result in the native version. Instead, API requests\n\t\t// only return the result, without including response properties like the headers.\n\t\tconst allowHeader = response.headers?.get( 'allow' );\n\t\tconst allowedMethods = allowHeader?.allow || allowHeader || '';\n\n\t\tconst permissions = {};\n\t\tconst methods = {\n\t\t\tcreate: 'POST',\n\t\t\tread: 'GET',\n\t\t\tupdate: 'PUT',\n\t\t\tdelete: 'DELETE',\n\t\t};\n\t\tfor ( const [ actionName, methodName ] of Object.entries( methods ) ) {\n\t\t\tpermissions[ actionName ] = allowedMethods.includes( methodName );\n\t\t}\n\n\t\tfor ( const action of retrievedActions ) {\n\t\t\tdispatch.receiveUserPermission(\n\t\t\t\t`${ action }/${ resourcePath }`,\n\t\t\t\tpermissions[ action ]\n\t\t\t);\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport const canUserEditEntityRecord =\n\t( kind, name, recordId ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst resource = entityConfig.__unstable_rest_base;\n\t\tawait dispatch( canUser( 'update', resource, recordId ) );\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosaves =\n\t( postType, postId ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tawait resolveSelect.getPostType( postType );\n\t\tconst autosaves = await apiFetch( {\n\t\t\tpath: `/${ restNamespace }/${ restBase }/${ postId }/autosaves?context=edit`,\n\t\t} );\n\n\t\tif ( autosaves && autosaves.length ) {\n\t\t\tdispatch.receiveAutosaves( postId, autosaves );\n\t\t}\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosave =\n\t( postType, postId ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect.getAutosaves( postType, postId );\n\t};\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport const __experimentalGetTemplateForLink =\n\t( link ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tlet template;\n\t\ttry {\n\t\t\t// This is NOT calling a REST endpoint but rather ends up with a response from\n\t\t\t// an Ajax function which has a different shape from a WP_REST_Response.\n\t\t\ttemplate = await apiFetch( {\n\t\t\t\turl: addQueryArgs( link, {\n\t\t\t\t\t'_wp-find-template': true,\n\t\t\t\t} ),\n\t\t\t} ).then( ( { data } ) => data );\n\t\t} catch ( e ) {\n\t\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t\t}\n\n\t\tif ( ! template ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = await resolveSelect.getEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\n\t\tif ( record ) {\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\t[ record ],\n\t\t\t\t{\n\t\t\t\t\t'find-template': link,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n\nexport const __experimentalGetCurrentGlobalStylesId =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\t\tconst globalStylesURL =\n\t\t\tactiveThemes?.[ 0 ]?._links?.[ 'wp:user-global-styles' ]?.[ 0 ]\n\t\t\t\t?.href;\n\t\tif ( globalStylesURL ) {\n\t\t\tconst globalStylesObject = await apiFetch( {\n\t\t\t\turl: globalStylesURL,\n\t\t\t} );\n\t\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId(\n\t\t\t\tglobalStylesObject.id\n\t\t\t);\n\t\t}\n\t};\n\nexport const __experimentalGetCurrentThemeBaseGlobalStyles =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst themeGlobalStyles = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tthemeGlobalStyles\n\t\t);\n\t};\n\nexport const __experimentalGetCurrentThemeGlobalStylesVariations =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst variations = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tvariations\n\t\t);\n\t};\n\n/**\n * Fetches and returns the revisions of the current global styles theme.\n */\nexport const getCurrentThemeGlobalStylesRevisions =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst globalStylesId =\n\t\t\tawait resolveSelect.__experimentalGetCurrentGlobalStylesId();\n\t\tconst record = globalStylesId\n\t\t\t? await resolveSelect.getEntityRecord(\n\t\t\t\t\t'root',\n\t\t\t\t\t'globalStyles',\n\t\t\t\t\tglobalStylesId\n\t\t\t  )\n\t\t\t: undefined;\n\t\tconst revisionsURL = record?._links?.[ 'version-history' ]?.[ 0 ]?.href;\n\n\t\tif ( revisionsURL ) {\n\t\t\tconst resetRevisions = await apiFetch( {\n\t\t\t\turl: revisionsURL,\n\t\t\t} );\n\t\t\tconst revisions = resetRevisions?.map( ( revision ) =>\n\t\t\t\tObject.fromEntries(\n\t\t\t\t\tObject.entries( revision ).map( ( [ key, value ] ) => [\n\t\t\t\t\t\tcamelCase( key ),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t] )\n\t\t\t\t)\n\t\t\t);\n\t\t\tdispatch.receiveThemeGlobalStyleRevisions(\n\t\t\t\tglobalStylesId,\n\t\t\t\trevisions\n\t\t\t);\n\t\t}\n\t};\n\ngetCurrentThemeGlobalStylesRevisions.shouldInvalidate = ( action ) => {\n\treturn (\n\t\taction.type === 'SAVE_ENTITY_RECORD_FINISH' &&\n\t\taction.kind === 'root' &&\n\t\t! action.error &&\n\t\taction.name === 'globalStyles'\n\t);\n};\n\nexport const getBlockPatterns =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst restPatterns = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/patterns',\n\t\t} );\n\t\tconst patterns = restPatterns?.map( ( pattern ) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries( pattern ).map( ( [ key, value ] ) => [\n\t\t\t\t\tcamelCase( key ),\n\t\t\t\t\tvalue,\n\t\t\t\t] )\n\t\t\t)\n\t\t);\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERNS', patterns } );\n\t};\n\nexport const getBlockPatternCategories =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst categories = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/categories',\n\t\t} );\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERN_CATEGORIES', categories } );\n\t};\n\nexport const getUserPatternCategories =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst patternCategories = await resolveSelect.getEntityRecords(\n\t\t\t'taxonomy',\n\t\t\t'wp_pattern_category',\n\t\t\t{\n\t\t\t\tper_page: -1,\n\t\t\t\t_fields: 'id,name,description,slug',\n\t\t\t\tcontext: 'view',\n\t\t\t}\n\t\t);\n\n\t\tconst mappedPatternCategories =\n\t\t\tpatternCategories?.map( ( userCategory ) => ( {\n\t\t\t\t...userCategory,\n\t\t\t\tlabel: userCategory.name,\n\t\t\t\tname: userCategory.slug,\n\t\t\t} ) ) || [];\n\n\t\tdispatch( {\n\t\t\ttype: 'RECEIVE_USER_PATTERN_CATEGORIES',\n\t\t\tpatternCategories: mappedPatternCategories,\n\t\t} );\n\t};\n\nexport const getNavigationFallbackId =\n\t() =>\n\tasync ( { dispatch, select } ) => {\n\t\tconst fallback = await apiFetch( {\n\t\t\tpath: addQueryArgs( '/wp-block-editor/v1/navigation-fallback', {\n\t\t\t\t_embed: true,\n\t\t\t} ),\n\t\t} );\n\n\t\tconst record = fallback?._embedded?.self;\n\n\t\tdispatch.receiveNavigationFallbackId( fallback?.id );\n\n\t\tif ( record ) {\n\t\t\t// If the fallback is already in the store, don't invalidate navigation queries.\n\t\t\t// Otherwise, invalidate the cache for the scenario where there were no Navigation\n\t\t\t// posts in the state and the fallback created one.\n\t\t\tconst existingFallbackEntityRecord = select.getEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\tfallback?.id\n\t\t\t);\n\t\t\tconst invalidateNavigationQueries = ! existingFallbackEntityRecord;\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\trecord,\n\t\t\t\tundefined,\n\t\t\t\tinvalidateNavigationQueries\n\t\t\t);\n\n\t\t\t// Resolve to avoid further network requests.\n\t\t\tdispatch.finishResolution( 'getEntityRecord', [\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\tfallback?.id,\n\t\t\t] );\n\t\t}\n\t};\n"],"mappings":"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"}